<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>docker</title>
    <url>/2019/04/19/docker/</url>
    <content><![CDATA[<h1 id="docker-备忘"><a href="#docker-备忘" class="headerlink" title="docker 备忘"></a>docker 备忘</h1><h2 id="set-docker-Repository"><a href="#set-docker-Repository" class="headerlink" title="set docker Repository"></a>set docker Repository</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">$</span> sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-'EOF'</div><div class="line">[dockerrepo]</div><div class="line">name=Docker Repository</div><div class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://yum.dockerproject.org/gpg</div><div class="line">EOF</div></pre></td></tr></table></figure>
<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">sudo yum install docker-engine</div></pre></td></tr></table></figure>
<h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">FROM openjdk:8</div><div class="line">ARG JAR</div><div class="line">ENV JAVA_OPTS=""</div><div class="line">COPY $&#123;JAR&#125; app.jar</div><div class="line">ENTRYPOINT java $&#123;JAVA_OPTS&#125; -Djava.security.egd=file:/dev/./urandom -jar /app.jar</div></pre></td></tr></table></figure>
<h2 id="docker-build"><a href="#docker-build" class="headerlink" title="docker build"></a>docker build</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">--net=host 使用宿主机IP + Host</div><div class="line">docker build -t nacos-provider:0.0.4 .  --build-arg JAR=provider-0.0.1-SNAPSHOT.jar  -f  Dockerfile</div></pre></td></tr></table></figure>
<h2 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">docker pull nginx</div><div class="line">docker run --name nacos-nginx -d -p 8848:80  -v /opt/nginx/nginx.conf/nginx.conf:/etc/nginx/nginx.conf  -v /opt/nginx/logs:/var/log/nginx -v /opt/nginx/logs:/etc/nginx/logs -d docker.io/nginx</div><div class="line"></div><div class="line">docker run --name cc4 -e JAVA_OPTS="-Dserver.port=8982 -Dapp.id=ngp-provider -Dapollo.cluster=DEV -Dapollo.meta=http://172.16.0.244:8080" --network=host -v /service/docker/provider/cc4/log/:/log/ -v /opt:/opt --privileged -d provider:7.0</div><div class="line"></div><div class="line"></div><div class="line">docker run --name c1 -e JAVA_OPTS="-Dserver.host=172.16.1.100 -Dserver.port=9993 -Dapp.id=ngp-provider -Dapollo.cluster=DEV -Dapollo.meta=http://172.16.0.244:8080 -Dlogging.file=/log/log.txt" --network=host -v /service/c1/log/:/log/ -v /opt:/opt --privileged -d 172.16.1.103/ngp/provider:1.1.2</div></pre></td></tr></table></figure>
<h2 id="docker-ftp"><a href="#docker-ftp" class="headerlink" title="docker ftp"></a>docker ftp</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">vim /usr/lib/systemd/system/docker.service</div><div class="line"><span class="meta">#</span>修改ExecStart这行</div><div class="line">ExecStart=/usr/bin/dockerd  -H tcp://0.0.0.0:2375  -H unix:///var/run/docker.sock</div><div class="line"><span class="meta">#</span>重新加载配置文件</div><div class="line">systemctl daemon-reload</div><div class="line"><span class="meta">#</span>重启服务</div><div class="line">systemctl restart docker.service</div><div class="line"><span class="meta">#</span>查看端口是否开启</div><div class="line">netstat -nlpt</div><div class="line"><span class="meta">#</span>直接curl看是否生效</div><div class="line">curl http://127.0.0.1:2375/info</div></pre></td></tr></table></figure>
<h2 id="docker-私有-registry"><a href="#docker-私有-registry" class="headerlink" title="docker 私有 registry"></a>docker 私有 registry</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">docker pull registry</div><div class="line"></div><div class="line">vim /data/config.yml</div><div class="line">version: 0.1</div><div class="line">log:</div><div class="line">  fields:</div><div class="line">    service: registry</div><div class="line">storage:</div><div class="line">  delete:</div><div class="line">    enabled: true</div><div class="line">  cache:</div><div class="line">    blobdescriptor: inmemory</div><div class="line">  filesystem:</div><div class="line">    rootdirectory: /var/lib/registry</div><div class="line">http:</div><div class="line">  addr: :5000</div><div class="line">  headers:</div><div class="line">    X-Content-Type-Options: [nosniff]</div><div class="line">health:</div><div class="line">  storagedriver:</div><div class="line">    enabled: true</div><div class="line">    interval: 10s</div><div class="line">    threshold: 3</div><div class="line"></div><div class="line">docker run -d -p 5000:5000 -v /opt/data/registry:/var/lib/registry  -v /data/config.yml:/etc/docker/registry/config.yml  registry </div><div class="line">docker pull busybox</div><div class="line">docker tag busybox 192.168.0.153:5000/busybox</div><div class="line">docker push 192.168.0.153:5000/busybox</div><div class="line">vim  /usr/lib/systemd/system/docker.service</div><div class="line">ExecStart=/usr/bin/dockerd  --insecure-registry 192.168.0.153:5000</div><div class="line">systemctl daemon-reload</div><div class="line">systemctl restart docker</div><div class="line">docker push 192.168.0.153:5000/busybox</div><div class="line">docker pull 192.168.0.153:5000/busybox</div></pre></td></tr></table></figure>
<h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</div><div class="line"></div><div class="line">sudo chmod +x /usr/local/bin/docker-compose</div><div class="line"></div><div class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</div></pre></td></tr></table></figure>
<h2 id="docker-harbor"><a href="#docker-harbor" class="headerlink" title="docker harbor"></a>docker harbor</h2><figure class="highlight"><table><tr><td class="code"><pre><div class="line"></div><div class="line">cat /etc/docker/daemon.json </div><div class="line">&#123;</div><div class="line">  "insecure-registries": [</div><div class="line">    "172.16.1.103"</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>JAVA 问题线上排查手段（转）</title>
    <url>/2018/11/07/hava/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>平时的工作中经常碰到很多疑难问题的处理，在解决问题的同时，有一些工具起到了相当大的作用，在此书写下来，一是作为笔记，可以让自己后续忘记了可快速翻阅，二是分享，希望看到此文的同学们可以拿出自己日常觉得帮助很大的工具，大家一起进步。</p>
<p>闲话不多说，开搞。</p>
<h2 id="Linux命令类"><a href="#Linux命令类" class="headerlink" title="Linux命令类"></a>Linux命令类</h2><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>最常用的tail -f</p>
<pre><code>tail -300f shopbase.log #倒数300行并进入实时监听文件写入模式 
</code></pre><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"> grep forest f.txt     </div><div class="line"><span class="meta">#</span>文件查找grep forest f.txt cpf.txt </div><div class="line"><span class="meta">#</span>多文件查找grep 'log' /home/admin -r -n </div><div class="line"><span class="meta">#</span>目录下查找所有符合关键字的文件cat f.txt | grep -i shopbase  grep 'shopbase' /home/admin -r -n --include *.&#123;vm,java&#125;</div><div class="line"><span class="meta">#</span>指定文件后缀grep 'shopbase' /home/admin -r -n --exclude *.&#123;vm,java&#125;</div><div class="line"><span class="meta">#</span>反匹配seq 10 | grep 5 -A 3  </div><div class="line"><span class="meta">#</span>上匹配seq 10 | grep 5 -B 3    </div><div class="line"><span class="meta">#</span>下匹配seq 10 | grep 5 -C 3   </div><div class="line"><span class="meta">#</span>上下匹配，平时用这个就妥了cat f.txt | grep -c 'SHOPBASE'</div></pre></td></tr></table></figure>
<h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>1 基础命令</p>
<pre><code>awk &apos;{print $4,$6}&apos; f.txtawk &apos;{print NR,$0}&apos; f.txt cpf.txt    awk &apos;{print FNR,$0}&apos; f.txt cpf.txtawk &apos;{print FNR,FILENAME,$0}&apos; f.txt cpf.txtawk &apos;{print FILENAME,&quot;NR=&quot;NR,&quot;FNR=&quot;FNR,&quot;$&quot;NF&quot;=&quot;$NF}&apos; f.txt cpf.txtecho 1:2:3:4 | awk -F: &apos;{print $1,$2,$3,$4}&apos;
</code></pre><p>2 匹配</p>
<pre><code>awk &apos;/ldb/ {print}&apos; f.txt   #匹配ldbawk &apos;!/ldb/ {print}&apos; f.txt  #不匹配ldbawk &apos;/ldb/ &amp;&amp; /LISTEN/ {print}&apos; f.txt   #匹配ldb和LISTENawk &apos;$5 ~ /ldb/ {print}&apos; f.txt #第五列匹配ldb
</code></pre><p>3 内建变量</p>
<p>NR:NR表示从awk开始执行后，按照记录分隔符读取的数据次数，默认的记录分隔符为换行符，因此默认的就是读取的数据行数，NR可以理解为Number of Record的缩写。</p>
<p>FNR:在awk处理多个输入文件的时候，在处理完第一个文件后，NR并不会从1开始，而是继续累加，因此就出现了FNR，每当处理一个新文件的时候，FNR就从1开始计数，FNR可以理解为File Number of Record。</p>
<p>NF: NF表示目前的记录被分割的字段的数目，NF可以理解为Number of Field。</p>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><pre><code>sudo -u admin find /home/admin /tmp /usr -name \*.log(多个目录去找)find . -iname \*.txt(大小写都匹配)find . -type d(当前目录下的所有子目录)find /usr -type l(当前目录下所有的符号链接)find /usr -type l -name &quot;z*&quot; -ls(符号链接的详细信息 eg:inode,目录)find /home/admin -size +250000k(超过250000k的文件，当然+改成-就是小于了)find /home/admin f -perm 777 -exec ls -l {} \; (按照权限查询文件)find /home/admin -atime -1  1天内访问过的文件find /home/admin -ctime -1  1天内状态改变过的文件    find /home/admin -mtime -1  1天内修改过的文件find /home/admin -amin -1  1分钟内访问过的文件find /home/admin -cmin -1  1分钟内状态改变过的文件    find /home/admin -mmin -1  1分钟内修改过的文件
</code></pre><h3 id="pgm"><a href="#pgm" class="headerlink" title="pgm"></a>pgm</h3><p>批量查询vm-shopbase满足条件的日志</p>
<pre><code>pgm -A -f vm-shopbase &apos;cat /home/admin/shopbase/logs/shopbase.log.2017-01-17|grep 2069861630&apos;
</code></pre><h3 id="tsar"><a href="#tsar" class="headerlink" title="tsar"></a>tsar</h3><p>tsar是咱公司自己的采集工具。很好用, 将历史收集到的数据持久化在磁盘上，所以我们快速来查询历史的系统数据。当然实时的应用情况也是可以查询的啦。大部分机器上都有安装。</p>
<pre><code>tsar  ##可以查看最近一天的各项指标
</code></pre><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/fc25b8f22e53818d5576c5d00dd52618.png" alt="screenshot.png"></p>
<pre><code>tsar --live ##可以查看实时指标，默认五秒一刷
</code></pre><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/b68910c5416fd85a99a49a092fc9ffbb.png" alt="screenshot.png"></p>
<pre><code>tsar -d 20161218 ##指定查看某天的数据，貌似最多只能看四个月的数据
</code></pre><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/aafdbfb515b817a2aceb270d1d470c19.png" alt="screenshot.png"></p>
<pre><code>tsar --memtsar --loadtsar --cpu##当然这个也可以和-d参数配合来查询某天的单个指标的情况 
</code></pre><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/cb46ef4e374e1502d3b672d04d48099a.png" alt="screenshot.png"><br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/079f3fa722bfa1991557469eb97c7273.png" alt="screenshot.png"><br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/6dd77351ad4d1ad84cdbfba20c9d4c29.png" alt="screenshot.png"></p>
<h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>top除了看一些基本信息之外，剩下的就是配合来查询vm的各种问题了</p>
<pre><code>ps -ef | grep javatop -H -p pid
</code></pre><p>获得线程10进制转16进制后jstack去抓看这个线程到底在干啥</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre><code>netstat -nat|awk  &apos;{print $6}&apos;|sort|uniq -c|sort -rn #查看当前连接，注意close_wait偏高的情况，比如如下
</code></pre><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/250a027410775cf5990d0db6e87ba927.png" alt="screenshot.png"><br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/639811da529750064e2f70867d6234e0.png" alt="screenshot.png"></p>
<h2 id="排查利器"><a href="#排查利器" class="headerlink" title="排查利器"></a>排查利器</h2><h3 id="btrace"><a href="#btrace" class="headerlink" title="btrace"></a>btrace</h3><p>首当其冲的要说的是btrace。真是生产环境&amp;预发的排查问题大杀器。 简介什么的就不说了。直接上代码干</p>
<ol>
<li><p>查看当前谁调用了ArrayList的add方法，同时只打印当前ArrayList的size大于500的线程调用栈</p>
<p>@OnMethod(clazz = “java.util.ArrayList”, method=”add”, location = @Location(value = Kind.CALL, clazz = “/.<em>/“, method = “/.</em>/“))<br>public static void m(@ProbeClassName String probeClass, @ProbeMethodName String probeMethod, @TargetInstance Object instance, @TargetMethodOrField String method) {</p>
<pre><code>if(getInt(field(&quot;java.util.ArrayList&quot;, &quot;size&quot;), instance) &gt; 479){    println(&quot;check who ArrayList.add method:&quot; + probeClass + &quot;#&quot; + probeMethod  + &quot;, method:&quot; + method + &quot;, size:&quot; + getInt(field(&quot;java.util.ArrayList&quot;, &quot;size&quot;), instance));    jstack();    println();    println(&quot;===========================&quot;);    println();}
</code></pre><p>}</p>
</li>
<li><p>监控当前服务方法被调用时返回的值以及请求的参数</p>
<p>@OnMethod(clazz = “com.taobao.sellerhome.transfer.biz.impl.C2CApplyerServiceImpl”, method=”nav”, location = @Location(value = Kind.RETURN))<br>public static void mt(long userId, int current, int relation, String check, String redirectUrl, @Return AnyType result) {</p>
<pre><code>println(&quot;parameter# userId:&quot; + userId + &quot;, current:&quot; + current + &quot;, relation:&quot; + relation + &quot;, check:&quot; + check + &quot;, redirectUrl:&quot; + redirectUrl + &quot;, result:&quot; + result);
</code></pre></li>
</ol>
<pre><code>}
</code></pre><p>其他功能集团的一些工具或多或少都有，就不说了。感兴趣的请移步。<br><a href="https://github.com/btraceio/btrace" target="_blank" rel="external">https://github.com/btraceio/btrace</a></p>
<p>注意:</p>
<ol>
<li>经过观察，1.3.9的release输出不稳定，要多触发几次才能看到正确的结果</li>
<li>正则表达式匹配trace类时范围一定要控制，否则极有可能出现跑满CPU导致应用卡死的情况</li>
<li>由于是字节码注入的原理，想要应用恢复到正常情况，需要重启应用。</li>
</ol>
<h3 id="Greys"><a href="#Greys" class="headerlink" title="Greys"></a>Greys</h3><p>Greys是@杜琨的大作吧。说几个挺棒的功能(部分功能和btrace重合):</p>
<p><code>sc -df xxx</code>: 输出当前类的详情,包括源码位置和classloader结构</p>
<p><code>trace class method</code>: 相当喜欢这个功能! 很早前可以早JProfiler看到这个功能。打印出当前方法调用的耗时情况，细分到每个方法。对排查方法性能时很有帮助，比如我之前这篇就是使用了trace命令来的:<a href="http://www.atatech.org/articles/52947" target="_blank" rel="external">http://www.atatech.org/articles/52947</a>。</p>
<p>其他功能部分和btrace重合，可以选用，感兴趣的请移步。<br><a href="http://www.atatech.org/articles/26247" target="_blank" rel="external">http://www.atatech.org/articles/26247</a></p>
<p>另外相关联的是arthas，他是基于Greys的，感兴趣的再移步<a href="http://mw.alibaba-inc.com/products/arthas/docs/middleware-container/arthas.wiki/home.html?spm=a1z9z.8109794.header.32.1lsoMc" target="_blank" rel="external">http://mw.alibaba-inc.com/products/arthas/docs/middleware-container/arthas.wiki/home.html?spm=a1z9z.8109794.header.32.1lsoMc</a></p>
<h3 id="javOSize"><a href="#javOSize" class="headerlink" title="javOSize"></a>javOSize</h3><p>就说一个功能<br><code>classes</code>：通过修改了字节码，改变了类的内容，即时生效。 所以可以做到快速的在某个地方打个日志看看输出，缺点是对代码的侵入性太大。但是如果自己知道自己在干嘛，的确是不错的玩意儿。</p>
<p>其他功能Greys和btrace都能很轻易做的到，不说了。</p>
<p>可以看看我之前写的一篇javOSize的简介<a href="http://www.atatech.org/articles/38546" target="_blank" rel="external">http://www.atatech.org/articles/38546</a><br>官网请移步<a href="http://www.javosize.com/" target="_blank" rel="external">http://www.javosize.com/</a></p>
<h3 id="JProfiler"><a href="#JProfiler" class="headerlink" title="JProfiler"></a>JProfiler</h3><p>之前判断许多问题要通过JProfiler，但是现在Greys和btrace基本都能搞定了。再加上出问题的基本上都是生产环境(网络隔离)，所以基本不怎么使用了，但是还是要标记一下。<br>官网请移步<a href="https://www.ej-technologies.com/products/jprofiler/overview.html" target="_blank" rel="external">https://www.ej-technologies.com/products/jprofiler/overview.html</a></p>
<h2 id="大杀器"><a href="#大杀器" class="headerlink" title="大杀器"></a>大杀器</h2><h3 id="eclipseMAT"><a href="#eclipseMAT" class="headerlink" title="eclipseMAT"></a>eclipseMAT</h3><p>可作为eclipse的插件，也可作为单独的程序打开。<br>详情请移步<a href="http://www.eclipse.org/mat/" target="_blank" rel="external">http://www.eclipse.org/mat/</a></p>
<h3 id="zprofiler"><a href="#zprofiler" class="headerlink" title="zprofiler"></a>zprofiler</h3><p>集团内的开发应该是无人不知无人不晓了。简而言之一句话:有了zprofiler还要mat干嘛<br>详情请移步<a href="http://zprofiler.alibaba-inc.com/" target="_blank" rel="external">zprofiler.alibaba-inc.com</a></p>
<h2 id="java三板斧，噢不对，是七把"><a href="#java三板斧，噢不对，是七把" class="headerlink" title="java三板斧，噢不对，是七把"></a>java三板斧，噢不对，是七把</h2><h3 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h3><p>我只用一条命令：</p>
<pre><code>sudo -u admin /opt/taobao/java/bin/jps -mlvV
</code></pre><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/7b156cb53250bf5f91811900c2575a91.png" alt="screenshot.png"></p>
<h3 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h3><p>普通用法:</p>
<pre><code>sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jstack 2815
</code></pre><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/bc501bf424b3d2884e6ec118d14554a3.png" alt="screenshot.png"></p>
<p>native+java栈:</p>
<pre><code>sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jstack -m 2815
</code></pre><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/4c59dc2971f3d8778e1898d64266266a.png" alt="screenshot.png"></p>
<h3 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h3><p>可看系统启动的参数，如下</p>
<pre><code>sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jinfo -flags 2815
</code></pre><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/bc879145e2994e9a09327407ed88382c.png" alt="screenshot.png"></p>
<h3 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h3><p>两个用途</p>
<p>1.查看堆的情况</p>
<pre><code>sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jmap -heap 2815
</code></pre><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/00d9eaef08cdb51263d202d26795036b.png" alt="screenshot.png"><br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/3c08bccf81fef8b7bcae2b321012b503.png" alt="screenshot.png"></p>
<p>2.dump</p>
<pre><code>sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jmap -dump:live,format=b,file=/tmp/heap2.bin 2815
</code></pre><p>或者</p>
<pre><code>sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jmap -dump:format=b,file=/tmp/heap3.bin 2815
</code></pre><p>3.看看堆都被谁占了? 再配合zprofiler和btrace，排查问题简直是如虎添翼</p>
<pre><code>sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jmap -histo 2815 | head -10
</code></pre><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/500ec6709fcd03a4fca2679615d54522.png" alt="screenshot.png"></p>
<h3 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h3><p>jstat参数众多，但是使用一个就够了</p>
<pre><code>sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jstat -gcutil 2815 1000 
</code></pre><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/05743916a9187535c202fb410d30d50d.png" alt="screenshot.png"></p>
<h3 id="jdb"><a href="#jdb" class="headerlink" title="jdb"></a>jdb</h3><p>时至今日，jdb也是经常使用的。<br>jdb可以用来预发debug,假设你预发的java_home是/opt/taobao/java/，远程调试端口是8000.那么<br><code>sudo -u admin /opt/taobao/java/bin/jdb -attach 8000</code>.</p>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/16332fcd45b20137bffc7a3b9a88b0f1.png" alt="screenshot.png"></p>
<p>出现以上代表jdb启动成功。后续可以进行设置断点进行调试。<br>具体参数可见oracle官方说明<a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html" target="_blank" rel="external">http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html</a></p>
<h3 id="CHLSDB"><a href="#CHLSDB" class="headerlink" title="CHLSDB"></a>CHLSDB</h3><p>CHLSDB感觉很多情况下可以看到更好玩的东西，不详细叙述了。 查询资料听说jstack和jmap等工具就是基于它的。</p>
<pre><code>sudo -u admin /opt/taobao/java/bin/java -classpath /opt/taobao/java/lib/sa-jdi.jar sun.jvm.hotspot.CLHSDB
</code></pre><p>更详细的可见R大此贴<br><a href="http://rednaxelafx.iteye.com/blog/1847971" target="_blank" rel="external">http://rednaxelafx.iteye.com/blog/1847971</a></p>
<h2 id="plugin-of-intellij-idea"><a href="#plugin-of-intellij-idea" class="headerlink" title="plugin of intellij idea"></a>plugin of intellij idea</h2><h3 id="key-promoter"><a href="#key-promoter" class="headerlink" title="key promoter"></a>key promoter</h3><p>快捷键一次你记不住，多来几次你总能记住了吧？</p>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/356c11885a95e28736a605aecdc8083e.png" alt="screenshot.png"></p>
<h3 id="maven-helper"><a href="#maven-helper" class="headerlink" title="maven helper"></a>maven helper</h3><p>分析maven依赖的好帮手。</p>
<h2 id="VM-options"><a href="#VM-options" class="headerlink" title="VM options"></a>VM options</h2><ol>
<li><p>你的类到底是从哪个文件加载进来的？</p>
<pre><code>-XX:+TraceClassLoading结果形如[Loaded java.lang.invoke.MethodHandleImpl$Lazy from D:\programme\jdk\jdk8U74\jre\lib\rt.jar]
</code></pre></li>
<li><p>应用挂了输出dump文件</p>
<pre><code>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/admin/logs/java.hprof集团的vm参数里边基本都有这个选项
</code></pre></li>
</ol>
<h2 id="jar包冲突"><a href="#jar包冲突" class="headerlink" title="jar包冲突"></a>jar包冲突</h2><p>把这个单独写个大标题不过分吧？每个人或多或少都处理过这种烦人的case。我特么下边这么多方案不信就搞不定你?</p>
<h3 id="mvn-dependency-tree-gt-dependency-txt"><a href="#mvn-dependency-tree-gt-dependency-txt" class="headerlink" title="mvn dependency:tree &gt; ~/dependency.txt"></a>mvn dependency:tree &gt; ~/dependency.txt</h3><p>打出所有依赖</p>
<h3 id="mvn-dependency-tree-Dverbose-Dincludes-groupId-artifactId"><a href="#mvn-dependency-tree-Dverbose-Dincludes-groupId-artifactId" class="headerlink" title="mvn dependency:tree -Dverbose -Dincludes=groupId:artifactId"></a>mvn dependency:tree -Dverbose -Dincludes=groupId:artifactId</h3><p>只打出指定groupId和artifactId的依赖关系</p>
<h3 id="XX-TraceClassLoading"><a href="#XX-TraceClassLoading" class="headerlink" title="-XX:+TraceClassLoading"></a>-XX:+TraceClassLoading</h3><p>vm启动脚本加入。在tomcat启动脚本中可见加载类的详细信息</p>
<h3 id="verbose"><a href="#verbose" class="headerlink" title="-verbose"></a>-verbose</h3><p>vm启动脚本加入。在tomcat启动脚本中可见加载类的详细信息</p>
<h3 id="greys-sc"><a href="#greys-sc" class="headerlink" title="greys:sc"></a>greys:sc</h3><p>greys的sc命令也能清晰的看到当前类是从哪里加载过来的</p>
<h3 id="tomcat-classloader-locate"><a href="#tomcat-classloader-locate" class="headerlink" title="tomcat-classloader-locate"></a>tomcat-classloader-locate</h3><p>通过以下url可以获知当前类是从哪里加载的<br>curl <a href="http://localhost:8006/classloader/locate?class=org.apache.xerces.xs.XSObject" target="_blank" rel="external">http://localhost:8006/classloader/locate?class=org.apache.xerces.xs.XSObject</a></p>
<h2 id="ALI-TOMCAT带给我们的惊喜-感谢-务观"><a href="#ALI-TOMCAT带给我们的惊喜-感谢-务观" class="headerlink" title="ALI-TOMCAT带给我们的惊喜(感谢@务观)"></a>ALI-TOMCAT带给我们的惊喜(感谢@务观)</h2><ol>
<li><p>列出容器加载的jar列表</p>
<p>curl <a href="http://localhost:8006/classloader/jars" target="_blank" rel="external">http://localhost:8006/classloader/jars</a></p>
</li>
<li><p>列出当前当当前类加载的实际jar包位置，解决类冲突时有用</p>
<p>curl <a href="http://localhost:8006/classloader/locate?class=org.apache.xerces.xs.XSObject" target="_blank" rel="external">http://localhost:8006/classloader/locate?class=org.apache.xerces.xs.XSObject</a><br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/4568b16d3db0daf98e852412b830f1a8.png" alt="screenshot.png"></p>
</li>
</ol>
<h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><h3 id="gpref"><a href="#gpref" class="headerlink" title="gpref"></a>gpref</h3><p><a href="http://www.atatech.org/articles/33317" target="_blank" rel="external">http://www.atatech.org/articles/33317</a></p>
<h3 id="dmesg"><a href="#dmesg" class="headerlink" title="dmesg"></a>dmesg</h3><p>如果发现自己的java进程悄无声息的消失了，几乎没有留下任何线索，那么dmesg一发，很有可能有你想要的。</p>
<pre><code>sudo dmesg|grep -i kill|less
</code></pre><p>去找关键字oom_killer。找到的结果类似如下:</p>
<pre><code>[6710782.021013] java invoked oom-killer: gfp_mask=0xd0, order=0, oom_adj=0, oom_scoe_adj=0[6710782.070639] [&lt;ffffffff81118898&gt;] ? oom_kill_process+0x68/0x140 [6710782.257588] Task in /LXC011175068174 killed as a result of limit of /LXC011175068174 [6710784.698347] Memory cgroup out of memory: Kill process 215701 (java) score 854 or sacrifice child [6710784.707978] Killed process 215701, UID 679, (java) total-vm:11017300kB, anon-rss:7152432kB, file-rss:1232kB
</code></pre><p>以上表明，对应的java进程被系统的OOM Killer给干掉了，得分为854.<br>解释一下OOM killer（Out-Of-Memory killer），该机制会监控机器的内存资源消耗。当机器内存耗尽前，该机制会扫描所有的进程（按照一定规则计算，内存占用，时间等），挑选出得分最高的进程，然后杀死，从而保护机器。</p>
<p>dmesg日志时间转换公式:<br>log实际时间=格林威治1970-01-01+(当前时间秒数-系统启动至今的秒数+dmesg打印的log时间)秒数：</p>
<pre><code>date -d &quot;1970-01-01 UTC `echo &quot;$(date +%s)-$(cat /proc/uptime|cut -f 1 -d&apos; &apos;)+12288812.926194&quot;|bc ` seconds&quot;
</code></pre><p>剩下的，就是看看为什么内存这么大，触发了OOM-Killer了。</p>
<h2 id="新技能get"><a href="#新技能get" class="headerlink" title="新技能get"></a>新技能get</h2><h3 id="RateLimiter"><a href="#RateLimiter" class="headerlink" title="RateLimiter"></a>RateLimiter</h3><p>想要精细的控制QPS? 比如这样一个场景，你调用某个接口，对方明确需要你限制你的QPS在400之内你怎么控制？这个时候RateLimiter就有了用武之地。详情可移步<a href="http://ifeve.com/guava-ratelimiter/" target="_blank" rel="external">http://ifeve.com/guava-ratelimiter/</a></p>
]]></content>
  </entry>
  <entry>
    <title>jstack 整理</title>
    <url>/2018/10/23/jstack/</url>
    <content><![CDATA[<h1 id="CPU问题"><a href="#CPU问题" class="headerlink" title="CPU问题"></a>CPU问题</h1><h2 id="查看CPU高的进程ID"><a href="#查看CPU高的进程ID" class="headerlink" title="查看CPU高的进程ID"></a>查看CPU高的进程ID</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">//查看cpu高的进程id</div><div class="line">top</div><div class="line">//查看进程内线程CPU占用情况</div><div class="line">ps -mp 26178 -o THREAD,tid,time</div><div class="line">//将线程ID转换为16位</div><div class="line">printf '%x\n' 26181</div><div class="line">//查看堆栈</div><div class="line">jstack pid | grep tid -A60</div></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>CPU 问题排查</tag>
      </tags>
  </entry>
  <entry>
    <title>consul集群搭建</title>
    <url>/2018/09/26/maven/</url>
    <content><![CDATA[<h1 id="添加第三方jar到nexus"><a href="#添加第三方jar到nexus" class="headerlink" title="添加第三方jar到nexus"></a>添加第三方jar到nexus</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mvn deploy:deploy-file -DgroupId=greenplum  -DartifactId=greenplum -Dversion=1.0 -Dpackaging=jar -Dfile=D:\WorkSpace\analysis\api\lib\greenplum.jar -Durl=http://172.16.0.241:8081/repository/maven-releases/ -DrepositoryId=maven-releases</div></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 重启</title>
    <url>/2018/08/01/spring%20boot/</url>
    <content><![CDATA[<p>#</p>
<h2 id="打包插件配置"><a href="#打包插件配置" class="headerlink" title="打包插件配置"></a>打包插件配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></div><div class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="构建服务"><a href="#构建服务" class="headerlink" title="构建服务"></a>构建服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">#</span> 设置服务关联</div><div class="line">ln -s /opt/app/monitor/xx.jar  /etc/init.d/xx</div><div class="line"><span class="meta">#</span> 查看关联结果</div><div class="line">ls /etc/init.d/</div><div class="line"><span class="meta">#</span> jvm配置项</div><div class="line">vim /opt/app/monitor/xx.conf</div><div class="line"><span class="meta">#</span> 服务命令</div><div class="line">service xx start|restart|stop|status</div></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>kylin 部署_启动流程</title>
    <url>/2018/07/17/kylin_start/</url>
    <content><![CDATA[<h1 id="ssh-免密登录"><a href="#ssh-免密登录" class="headerlink" title="ssh 免密登录"></a>ssh 免密登录</h1><h2 id="matser-设置"><a href="#matser-设置" class="headerlink" title="matser 设置"></a>matser 设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">ssh-keygen -t rsa</div><div class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</div><div class="line">chmod 600  ~/.ssh/authorized_keys</div><div class="line">sudo scp ~/.ssh/id_rsa.pub hadoop@slave1:~/</div></pre></td></tr></table></figure>
<h2 id="host-更改"><a href="#host-更改" class="headerlink" title="host 更改"></a>host 更改</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">172.16.3.51 K1</div><div class="line">172.16.3.50 K2</div><div class="line">172.16.3.49 K3</div></pre></td></tr></table></figure>
<h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><h2 id="创建data目录"><a href="#创建data目录" class="headerlink" title="创建data目录"></a>创建data目录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">mkdir /home/data/hdfs/name</div><div class="line">mkdir /home/data/hdfs/data</div></pre></td></tr></table></figure>
<h2 id="haddoop-配置项"><a href="#haddoop-配置项" class="headerlink" title="haddoop 配置项"></a>haddoop 配置项</h2><p>/opt/hadoop/hadoop-2.8.4/etc/hadoop/slaves</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">K2</div><div class="line">K3</div></pre></td></tr></table></figure>
<p>hdfs-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/data/hdfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">final</span>&gt;</span>true<span class="tag">&lt;/<span class="name">final</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/data/hdfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">final</span>&gt;</span>true<span class="tag">&lt;/<span class="name">final</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>K1:9001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>core-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/data/hdfs/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>A base for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://K1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>mapred-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>K1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>yarn-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>K1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">　<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">  　<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">　<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="运行Hadoop"><a href="#运行Hadoop" class="headerlink" title="运行Hadoop"></a>运行Hadoop</h2><p>首先使用命令：hadoop namenode -format</p>
<p>运行:start-all.sh,start-hdfs.sh, start-yard.sh</p>
<p>启动 historystoryserive</p>
<p>mr-jobhistory-daemon.sh start historyserver </p>
<h2 id="搭建ZK-集群"><a href="#搭建ZK-集群" class="headerlink" title="搭建ZK 集群"></a>搭建ZK 集群</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">server.1=K1:2888:3888</div><div class="line">server.2=K2:2888:3888</div><div class="line">server.3=K3:2888:3888</div></pre></td></tr></table></figure>
<p>myid设置</p>
<p>echo 1 &gt;/home/data/zookeeper/myid</p>
<h2 id="搭建Hbase-集群"><a href="#搭建Hbase-集群" class="headerlink" title="搭建Hbase 集群"></a>搭建Hbase 集群</h2><p>regionservers</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">K2</div><div class="line">K3</div></pre></td></tr></table></figure>
<p>core-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/data/hdfs/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>A base for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>io.file.buffer.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>131072<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://K1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>hdfs-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/data/hdfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">final</span>&gt;</span>true<span class="tag">&lt;/<span class="name">final</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/data/hdfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">final</span>&gt;</span>true<span class="tag">&lt;/<span class="name">final</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>K1:9001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>hbase-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://K1:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>K1:60000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>K1,K2,K3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="hive-配置"><a href="#hive-配置" class="headerlink" title="hive 配置"></a>hive 配置</h2><h2 id="kylin-配置"><a href="#kylin-配置" class="headerlink" title="kylin 配置"></a>kylin 配置</h2>]]></content>
      <tags>
        <tag>kylin,bigdata</tag>
      </tags>
  </entry>
  <entry>
    <title>Greenplum 源码编译安装教程</title>
    <url>/2018/07/17/gpdb/</url>
    <content><![CDATA[<h1 id="安装环境准备"><a href="#安装环境准备" class="headerlink" title="安装环境准备"></a>安装环境准备</h1><h2 id="处理-etc-sysctl-conf"><a href="#处理-etc-sysctl-conf" class="headerlink" title="处理/etc/sysctl.conf"></a>处理/etc/sysctl.conf</h2><figure class="highlight vim"><table><tr><td class="code"><pre><div class="line">kernel.shmall = <span class="number">4000000000</span></div><div class="line">net.ipv4.tcp_max_syn_backlog = <span class="number">4096</span></div><div class="line"><span class="keyword">vm</span>.overcommit_memory = <span class="number">2</span></div><div class="line">net.core.netdev_max_backlog = <span class="number">10000</span></div><div class="line">kernel.sem = <span class="number">250</span> <span class="number">64000</span> <span class="number">100</span> <span class="number">512</span></div><div class="line">net.ipv4.ip_local_port_range = <span class="number">1025</span> <span class="number">65535</span></div><div class="line">net.ipv4.tcp_tw_recycle = <span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="处理-etc-security-limits-conf"><a href="#处理-etc-security-limits-conf" class="headerlink" title="处理/etc/security/limits.conf"></a>处理/etc/security/limits.conf</h2><figure class="highlight vim"><table><tr><td class="code"><pre><div class="line">* soft nofile <span class="number">65536</span></div><div class="line">* hard nofile <span class="number">65536</span></div></pre></td></tr></table></figure>
<h2 id="etc-security-limits-d-90-nproc-conf"><a href="#etc-security-limits-d-90-nproc-conf" class="headerlink" title="/etc/security/limits.d/90-nproc.conf"></a>/etc/security/limits.d/90-nproc.conf</h2><figure class="highlight vim"><table><tr><td class="code"><pre><div class="line">* soft nproc <span class="number">131072</span></div><div class="line">* hard nproc <span class="number">131072</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="yum安装依赖"><a href="#yum安装依赖" class="headerlink" title="yum安装依赖"></a>yum安装依赖</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">sudo yum -y install rsync coreutils glib2 lrzsz sysstat e4fsprogs xfsprogs ntp readline-devel zlib zlib-devel openssl openssl-devel pam-devel libxml2-devel libxslt-devel python-devel tcl-devel gcc make smartmontools flex bison perl perl-devel perl-ExtUtils* OpenIPMI-tools openldap openldap-devel logrotategcc-c++ python-py curl-devel pam</div><div class="line"></div><div class="line">sudo yum install apr-devel libevent-devel libyaml-devel</div><div class="line">wget https://bootstrap.pypa.io/get-pip.py</div><div class="line">sudo python get-pip.py</div><div class="line">sudo pip install psi lockfile paramiko setuptools epydoc</div><div class="line">sudo pip install --upgrade setuptools</div></pre></td></tr></table></figure>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">./configure--prefix=/home/gpadmin/gpsql --with-gssapi --with-pgport=5432--with-libedit-preferred --with-perl --with-python --with-openssl --with-pam--with-krb5 --with-ldap --with-libxml --enable-cassert --enable-debug --enable-testutils--enable-debugbreak --enable-depend</div></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Greenplum</tag>
      </tags>
  </entry>
  <entry>
    <title>consul集群搭建</title>
    <url>/2018/07/17/consul/</url>
    <content><![CDATA[<h1 id="consul集群搭建"><a href="#consul集群搭建" class="headerlink" title="consul集群搭建"></a>consul集群搭建</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>centos 7 </li>
<li>K1/K2/K3 三台PC</li>
</ul>
<h2 id="下载zip包"><a href="#下载zip包" class="headerlink" title="下载zip包"></a>下载zip包</h2><p><a href="https://www.consul.io/downloads.html" target="_blank" rel="external">https://www.consul.io/downloads.html</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>scp consul /usr/local/bin/</p>
</li>
<li><p>consul -v</p>
</li>
</ul>
<a id="more"></a>
<h2 id="启动加入集群"><a href="#启动加入集群" class="headerlink" title="启动加入集群"></a>启动加入集群</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">consul agent -server -bootstrap -bind=0.0.0.0 -client=172.16.3.51 -data-dir=/opt/consul/data -ui -node=k1 &amp;</div><div class="line">consul agent -server -bind=0.0.0.0 -client=172.16.3.52 -data-dir=/opt/consul/data -ui -node=k2  -join 172.16.3.51 &amp;</div><div class="line">consul agent -server -bind=0.0.0.0 -client=172.16.3.49 -data-dir=/opt/consul/data -ui -node=k3  -join 172.16.3.51 &amp;</div></pre></td></tr></table></figure>
<h2 id="访问UI"><a href="#访问UI" class="headerlink" title="访问UI"></a>访问UI</h2><p><a href="http://172.16.3.51:8500/ui/" target="_blank" rel="external">http://172.16.3.51:8500/ui/</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>java 基础整理</title>
    <url>/2018/06/12/java/</url>
    <content><![CDATA[<h1 id="java-kylin"><a href="#java-kylin" class="headerlink" title="java-kylin"></a>java-kylin</h1><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><h3 id="与-Net不一样的"><a href="#与-Net不一样的" class="headerlink" title="与.Net不一样的"></a>与.Net不一样的</h3><h4 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h4><ul>
<li>方法规则采用:lowerCamelCase,类命名规则:UpperCamelCase</li>
<li>类继承 extend 接口实现:implement</li>
<li>实现接口的方式@Override 特性</li>
<li>虚方法virtual Java 没有对应的关键字:<strong>在运行时，会遗忘子类对象中与父类对象中不同的方法。也会覆盖与父类中相同的方法–重写</strong></li>
<li>抽象方法 abstract</li>
<li>Java枚举 中可以定义方法/可以继承接口，java中的枚举其实就是一种特殊的类</li>
<li>接口不要用I开头如 IUser 应该为 UserImpl–&gt;User</li>
<li>.Net 事件/委托   事件的定义 在.net中会生成一个内部类/接口，JAVA内部类方式模拟多继承</li>
<li>.NET中的特性Attribute -&gt;JAVA 中的注解 @interface</li>
<li>JVM-CLR:(JVM可以配置更多参数:初始化内存/最大内存/GC策略等)</li>
<li>(并发包)System.Collections.Concurrent-&gt;java.util.concurrent</li>
<li>泛型约束 &lt;? extends Object&gt; / &lt;? supper Object&gt; 对于集合影响</li>
<li>启动jar 需要手动的加载jar包/class文件 -classpath</li>
<li>jar包运行需要手动的指定main 入口函数（通常由waven 插件 打包工具完成）<br>MANIFEST.MF 文件 Main-Class</li>
<li>http抓包? 基于http 抓包需要设置 jvm代理 -DproxySet=true -DproxyHost=127.0.0.1 -DproxyPort=8888</li>
<li>字符串比较 一定要用 “aa”.equal(“aa”)（除非都是字面量），不然就是比较的引用类型</li>
<li>string.format(“%s %d”) 与 .net的 string.format(“{0} {1}”)</li>
<li>….</li>
</ul>
<h4 id="Web-服务器"><a href="#Web-服务器" class="headerlink" title="Web 服务器"></a>Web 服务器</h4><ul>
<li>Jetty/Tomact/Jboss 可以嵌入到应用程序内（Spring Boot 均是采用内嵌方式 友好的支持 微服务/docker）</li>
</ul>
<a id="more"></a>
<h4 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h4><p>key-promoter 插件方便大家记住快捷键</p>
<h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><ul>
<li>IOC 容器(xml方式声明/注解方式声明)</li>
<li>AOP(由于类的创建交给了容器 因此很方便实现IOC，<strong>Proxy.newProxyInstance</strong>)</li>
<li><code>https://docs.spring.io/spring/docs/current/spring-framework-reference/index.html</code></li>
</ul>
<h4 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring(IOC)"></a>Spring(IOC)</h4><ul>
<li>XML方式配置@Bean</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd"&gt;</div><div class="line">       <span class="comment">&lt;!-- 配置一个bean --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"A"</span>  <span class="attr">class</span>=<span class="string">"test.A"</span> &gt;</span></div><div class="line">            <span class="comment">&lt;!--给构造函数传递参数，没有的话则调用默认构造方法  --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"15"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"B"</span> <span class="attr">class</span>=<span class="string">"test.B"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"C"</span> <span class="attr">class</span>=<span class="string">"test.C"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 基本数据类型参数用value=字符串（Spring根据构造参数类型自动解析字符串），</span></div><div class="line">                             引用类型的参数用ref= bean id --&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"c"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- factory-method通过工厂方法将单例类配置为bean --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"f"</span> <span class="attr">class</span>=<span class="string">"test.F"</span> <span class="attr">factory-method</span>=<span class="string">"getImpl"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>注解方式配置@Bean</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@ComponentScan</span> 扫描器</div><div class="line"><span class="meta">@Configuration</span> 表明该类是配置类</div><div class="line"><span class="meta">@Component</span>   指定把一个对象加入IOC容器---&gt;<span class="meta">@Name</span>也可以实现相同的效果【一般少用】</div><div class="line"><span class="meta">@Repository</span>   作用同<span class="meta">@Component</span>； 在持久层使用</div><div class="line"><span class="meta">@Service</span>      作用同<span class="meta">@Component</span>； 在业务逻辑层使用</div><div class="line"><span class="meta">@Controller</span>    作用同<span class="meta">@Component</span>； 在控制层使用</div><div class="line"><span class="meta">@Resource</span>  依赖关系</div><div class="line">如果<span class="meta">@Resource</span>不指定值，那么就根据类型来找，相同的类型在IOC容器中不能有两个</div><div class="line">如果<span class="meta">@Resource</span>指定了值，那么就根据名字来找</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span> 注入</div><div class="line">--------------------------------</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JwtTokenUtil jwtTokenUtil;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">public</span> UserRepository userRepository;</div><div class="line"></div><div class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestBody User user)</span> </span>&#123;</div><div class="line"></div><div class="line">        User db_user = userRepository.login(user.getUsername(), user.getPassword());</div><div class="line">        <span class="keyword">return</span> jwtTokenUtil.generateToken(db_user);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">UserRepository</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setUsername(username);</div><div class="line">        user.setPassword(password);</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenUtil</span></span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 密钥</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String secret = <span class="string">"aaaaaaaa"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从数据声明生成令牌</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> claims 数据声明</div><div class="line">     * <span class="doctag">@return</span> 令牌</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">generateToken</span><span class="params">(Map&lt;String, Object&gt; claims)</span> </span>&#123;</div><div class="line">        Date expirationDate = <span class="keyword">new</span> Date(System.currentTimeMillis() + <span class="number">2592000L</span> * <span class="number">1000</span>);</div><div class="line">        <span class="keyword">return</span> Jwts.builder().setClaims(claims).setExpiration(expirationDate).signWith(SignatureAlgorithm.HS512, secret).compact();</div><div class="line">    &#125;</div><div class="line"> ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Spirng-AOP"><a href="#Spirng-AOP" class="headerlink" title="Spirng AOP"></a>Spirng AOP</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.controller;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;  </div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"><span class="meta">@RestController</span>  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstController</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/aop"</span>)  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">first</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="string">"aop done"</span>;  </div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"><span class="keyword">package</span> com.example.aop;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;  </div><div class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;  </div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;  </div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;  </div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;  </div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="meta">@Aspect</span>  </div><div class="line"><span class="meta">@Component</span>  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</div><div class="line">  <span class="comment">//@Pointcut("execution(访问修饰符 返回值匹配 类路径匹配.方法名匹配.*(..))")    </span></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public * com.example.controller.*.*(..))"</span>)  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">webLog</span><span class="params">()</span></span>&#123;&#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Before</span>(<span class="string">"webLog()"</span>)  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deBefore</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@AfterReturning</span>(returning = <span class="string">"ret"</span>, pointcut = <span class="string">"webLog()"</span>)  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(Object ret)</span> <span class="keyword">throws</span> Throwable </span>&#123;    </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//后置异常通知  </span></div><div class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"webLog()"</span>)  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">throwss</span><span class="params">(JoinPoint jp)</span></span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//后置最终通知,final增强，不管是抛出异常或者正常退出都会执行  </span></div><div class="line">    <span class="meta">@After</span>(<span class="string">"webLog()"</span>)  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint jp)</span></span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//环绕通知,环绕增强，相当于MethodInterceptor  </span></div><div class="line">    <span class="meta">@Around</span>(<span class="string">"webLog()"</span>)  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">arround</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            Object o =  pjp.proceed();  </div><div class="line">            <span class="keyword">return</span> o;  </div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Waven"><a href="#Waven" class="headerlink" title="Waven"></a>Waven</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><div class="line">mvn archetype:generate 创建Maven项目</div><div class="line">mvn compile</div><div class="line">mvn deploy(需要在.m2/setting.xml文件中配置对应的账号与密码)</div><div class="line">mvn clean</div><div class="line">mvn package</div><div class="line">mvn install</div><div class="line">mvn clean package -Dmaven.test.skip=true:</div></pre></td></tr></table></figure>
<h4 id="Spring-Boot-Pom"><a href="#Spring-Boot-Pom" class="headerlink" title="Spring Boot Pom"></a>Spring Boot Pom</h4><ul>
<li>Spring Boot 项目引用</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>beefun.analysis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>beefun.analysis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--继承--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--模块--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>scheduled<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>etl<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--参数 配置文件中通过 $&#123;java.version&#125; 访问--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--热部署--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>beefun.influx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>beefun.influx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-release<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--私有仓库--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://172.16.0.241:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--插件仓库--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-release<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>可执行的jar pom</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>beefun.analysis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>beefun.analysis.etl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.otter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>canal.client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-it<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--编译插件--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--打包插件--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                            <span class="comment">&lt;!--写入口函数--&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">transformer</span></span></div><div class="line">                                        <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</div><div class="line">                                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>beefun.analysis.etl.EtlApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>Maven配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">    <span class="comment">&lt;!-- 仓库账号密码设置/方便发布的私有仓库 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">server</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></div><div class="line">     <span class="comment">&lt;!-- 镜像代理设置，解决大中华局域网的问题 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h3><h4 id="注解-Condition"><a href="#注解-Condition" class="headerlink" title="注解/ @Condition*"></a>注解/ @Condition<em>*</em></h4><p><code>http://3mu.github.io/2016/12/19/spring/</code></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"grafana"</span>)</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GrafanaConfig</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String api;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getApi</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> api;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApi</span><span class="params">(String api)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.api = api;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String token;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToken</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> token;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setToken</span><span class="params">(String token)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.token = token;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; webhooks;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getWebhooks</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> webhooks;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWebhooks</span><span class="params">(List&lt;String&gt; webhooks)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.webhooks = webhooks;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; ignore;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getIgnore</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ignore;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIgnore</span><span class="params">(List&lt;String&gt; ignore)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ignore = ignore;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight yml"><table><tr><td class="code"><pre><div class="line"><span class="attr">grafana:</span></div><div class="line"><span class="attr">  api:</span> <span class="attr">http://monitor.wsgjp.com</span></div><div class="line"><span class="attr">  token:</span> <span class="string">Bearer</span> <span class="string">eyJrIjoiMWtpSjhJSXFRZzl0TmV6cDBOQjQyRTZRcE42MVNUZmkiLCJuIjoib2tvayIsImlkIjoxfQ==</span></div><div class="line"><span class="attr">  webhooks:</span> </div><div class="line"><span class="attr">  - https:</span><span class="string">//oapi.dingtalk.com/robot/send?access_token=d3b4bb10db553f92c1f424502cb8cb62c0be8b02bca1add9c4c880d1919eab99</span></div><div class="line"><span class="attr">  - https:</span><span class="string">//oapi.dingtalk.com/robot/send?access_token=1231231313123</span></div><div class="line"><span class="attr">  ignore:</span> </div><div class="line"><span class="bullet">  -</span> <span class="string">bfuned2</span></div></pre></td></tr></table></figure>
<h4 id="Spring-Boot-MVC"><a href="#Spring-Boot-MVC" class="headerlink" title="Spring Boot MVC"></a>Spring Boot MVC</h4><ul>
<li>thymeleaf 模板解析</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  thymeleaf:</span></div><div class="line"><span class="attr">    prefix:</span> <span class="attr">classpath:/templates/</span></div><div class="line"><span class="attr">    suffix:</span> <span class="string">.html</span></div><div class="line"><span class="attr">    mode:</span> <span class="string">HTML5</span></div><div class="line"><span class="attr">    encoding:</span> <span class="string">utf-8</span></div><div class="line"><span class="attr">    servlet:</span></div><div class="line"><span class="attr">      content-type:</span> <span class="string">text/html</span></div><div class="line"><span class="attr">    cache:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/index"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test</span><span class="params">(ModelAndView mv)</span> </span>&#123;</div><div class="line">        mv.setViewName(<span class="string">"/index"</span>);</div><div class="line">        String username = SecurityContextHolder.getContext().getAuthentication().getName();</div><div class="line">        mv.addObject(<span class="string">"title"</span>, <span class="string">"this is a word "</span> + username);</div><div class="line">        <span class="keyword">return</span> mv;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'Hello, ' + $&#123;title&#125;"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Spring-Boot-Rest-Service"><a href="#Spring-Boot-Rest-Service" class="headerlink" title="Spring Boot Rest Service"></a>Spring Boot Rest Service</h4><ul>
<li>Rest</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">public</span> OrderService orderService;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/count"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> orderService.getCount();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Spring-Boot-Schedule"><a href="#Spring-Boot-Schedule" class="headerlink" title="Spring Boot Schedule"></a>Spring Boot Schedule</h4><ul>
<li>基于corn的自定义任务</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KylinTask</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/2 * * * * ?"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"is run"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Mybatis-与-Spring-Boot-集成"><a href="#Mybatis-与-Spring-Boot-集成" class="headerlink" title="Mybatis 与 Spring Boot 集成"></a>Mybatis 与 Spring Boot 集成</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Mapper</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select count(1) from TESTSALE"</span>)</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h3><p><code>http://gitlab.wsgjp.com.cn:10080/wsgjp/analysis.git</code></p>
<h4 id="Kylin"><a href="#Kylin" class="headerlink" title="Kylin"></a>Kylin</h4><p><img src="http://ohugkp1mj.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86.png" alt="123"></p>
<ul>
<li>EFP 连接数据分析服务获取报表数据</li>
<li>数据分析服务通过Sql 语句查询kylin 系统数据</li>
<li>计划任务 每天晚上调用Kylin Rest Api 增量的进行预计算 方便查询</li>
<li>数据收集 通过Canal 经过数据清洗导入到Hbase</li>
</ul>
<h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><ul>
<li>beefun.analysis.api</li>
</ul>
<p>对erp提供api服务</p>
<ul>
<li>beefun.analysis.etl</li>
</ul>
<p>数据收集 通过canal 采集binlog 同步到 hbase</p>
<ul>
<li>beefun.analysis.scheduled</li>
</ul>
<p>计划任务 定期执行kylin 构建任务</p>
<h4 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h4><p><code>https://spring.io/guides</code></p>
<p><code>http://www.mybatis.org/mybatis-3/zh/index.html</code></p>
<p><code>https://github.com/dyc87112/SpringBoot-Learning</code></p>
<p><code>《thinking in java》</code></p>
]]></content>
      <tags>
        <tag>java spring</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb_grafana</title>
    <url>/2017/11/09/influxdb-grafana/</url>
    <content><![CDATA[<h1 id="influxdb安装"><a href="#influxdb安装" class="headerlink" title="influxdb安装"></a>influxdb安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h2 id="grafana"><a href="#grafana" class="headerlink" title="grafana"></a>grafana</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>webmagic 搭建</title>
    <url>/2017/07/10/webmagicinit/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><img src="http://code4craft.github.io/images/posts/webmagic.png" alt=""></p>
<ul>
<li>WebMagic是一个简单灵活的Java爬虫框架。基于WebMagic，你可以快速开发出一个高效、易维护的爬虫。</li>
<li>简单的API，可快速上手</li>
<li>模块化的结构，可轻松扩展.WebMagic的结构分为Downloader、PageProcessor、Scheduler、Pipeline四大组件，</li>
<li>提供多线程和分布式支持(官方提供redis分布式支持)<a id="more"></a>
<h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1></li>
<li><p>pom 引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">     <span class="comment">&lt;!--核心库--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">     <span class="comment">&lt;!--扩展 包 redis分布式支持...--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>pom 插件(指定 jar 启动class)</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                       <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                           <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></div><div class="line">                               <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</span></div><div class="line">                                   <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.es.core.App<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></div><div class="line">                               <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></div><div class="line">                           <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></div><div class="line">                       <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">               <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="爬美团技术博客文章"><a href="#爬美团技术博客文章" class="headerlink" title="爬美团技术博客文章"></a>爬美团技术博客文章</h2><ul>
<li><p>定义pageprocessor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeituanPageProcessor</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Site site = Site.me().setRetryTimes(<span class="number">3</span>).setSleepTime(<span class="number">1000</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; targets=<span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        Selectable links=page.getHtml().links();</div><div class="line">        <span class="keyword">for</span>(String link : links.all())</div><div class="line">        &#123;</div><div class="line">           <span class="keyword">if</span> (link.contains(<span class="string">"tech.meituan.com"</span>)&amp;&amp;link.contains(<span class="string">".html"</span>))&#123;</div><div class="line">               targets.add(link);</div><div class="line">           &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/// 相关链接</span></div><div class="line">        page.addTargetRequests(targets);</div><div class="line">        System.out.println(page.getUrl());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> site;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">App</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        InputStream stream=App.class.getClassLoader().getResourceAsStream(<span class="string">"app.properties"</span>);</div><div class="line">        Properties properties=<span class="keyword">new</span> Properties();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            properties.load(stream);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        String host=properties.getProperty(<span class="string">"redis.config.host"</span>);</div><div class="line">        <span class="keyword">int</span> port= Integer.parseInt(properties.getProperty(<span class="string">"redis.config.port"</span>));</div><div class="line">        Spider spider=Spider.create(<span class="keyword">new</span> MeituanPageProcessor());</div><div class="line">        GenericObjectPoolConfig config=<span class="keyword">new</span> GenericObjectPoolConfig();</div><div class="line">        JedisPool pool=<span class="keyword">new</span> JedisPool(config,host,port,<span class="number">10000</span>,<span class="string">"********"</span>,<span class="keyword">false</span>);</div><div class="line">        spider.setScheduler(<span class="keyword">new</span> RedisScheduler(pool));</div><div class="line">        spider.addUrl(<span class="string">"http://tech.meituan.com/"</span>);</div><div class="line">        spider.thread(<span class="number">5</span>);</div><div class="line">        spider.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mvn install</div><div class="line">java -jar com.es-1.0-SNAPSHOT.jar</div></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>webmagic</tag>
      </tags>
  </entry>
  <entry>
    <title>Windbg</title>
    <url>/2017/02/08/windbg/</url>
    <content><![CDATA[<h2 id="抓包命令"><a href="#抓包命令" class="headerlink" title="抓包命令"></a>抓包命令</h2><figure class="highlight bat"><table><tr><td class="code"><pre><div class="line">procdump64.exe -ma /accepteula   -n <span class="number">1</span> <span class="number">6140</span> d:\</div></pre></td></tr></table></figure>
<h2 id="命令-加载调试器"><a href="#命令-加载调试器" class="headerlink" title="命令(加载调试器)"></a>命令(加载调试器)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">命令：</div><div class="line">.loadby sos mscorwks  .Net 3.5版本及以下</div><div class="line">.loadby sos clr .Net 4.0</div><div class="line">.loadc:\windows\microsoft.net\framework\v2.0.50727\sos.dll</div><div class="line">说明：</div><div class="line">如果服务器的.Net版本与本机不匹配需要服务器版本的mscordacwks.dll文件，如下：.sympath=</div><div class="line">``` </div><div class="line">&lt;!--more--&gt;</div><div class="line">##  基本操作指令</div></pre></td></tr></table></figure>
<p>!help    sos指令帮助<br>!threads  显示所有线程<br>!threadpool(!tp)   显示程序池信息<br>~54s   查看54号线程<br>kb   显示当前线程的callstack<br>~*e!clrstack  看所有线程的堆栈信息<br>!dumpheap  显示托管堆的信息<br>!clrstack  显示调用栈<br>!dumpstackobjects 打印当前thread的stack中保存的所有托管的object<br>!dumpclass  打印出指定类型信息址上的类型定义<br>!eeheap   列举出当前进程中managedheap的统计信息<br>!dumpobj(!do)  显示一个对象的内容<br>!dumparray 显示数组<br>!syncblk   显示同步块<br>!runaway  显示线程cpu时间<br>!gcroot    跟踪对象内存引用<br>!gchandles   打印出当前所有的GCHandle统计信息<br>!objsize    打印出指定object<br>!pe    打印异常<br>vertarget  查看系统运行时间<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> </div><div class="line">## 内存泄露常用指令</div></pre></td></tr></table></figure></p>
<p> !dumpheap–stat  检查当前所有托管类型的统计信息<br>!dumpheap –mt 查看函数表地址中的各个对象信息<br>!do   查看某个对象的具体信息<br>!da   查看数组信息<br>!gcroot  查看哪个root了某个对象</p>
<p>使用例子：<br>!dumpheap –mt 79124418  79124418是指某个函数表的地址。<br>!do 0aca1000  查看0aca1000地址中的对象<br>!gcroot 0aca1000  查看谁root 了0aca1000对象<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">## 线程Hang住常用指令</div></pre></td></tr></table></figure></p>
<p> !threads   查看托管经程的统计信息<br> !tp(threadpool)   查看一共设有多少个线程在运行<br> !runawayf    查看各个线程的CPU使用情况<br>~*e!clrstack 查看各个线程都在做什么<br>!synblk 查看AwareLock的Lock方法</p>
<p> 不常用指令：<br> !ip2md 找到对应的module信息，后面参数为Callback中的EIP地址<br> lmvm    查看DLL/EXE文件信息，参数为某个dll文件名称<br> !savemodule   保存DLL到本场</p>
<p> 使用例子：<br> !ip2md 0x09d30bao<br> lmvmcommonobjects<br> !savemodule 081f0000 d:\xiongli\commandobject.dll<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">## 内存指令：</div></pre></td></tr></table></figure></p>
<p> S    可以搜索内存<br> r   显示寄存器的信息<br> d    显示内存地址上的值<br> e    命令修改内存地址上的值<br> !address   命令显示某一地址上的页信息<br> 使用例子：<br> 1）使用d命令显示esp寄存器指向的内存，默认为byte<br>   d  esp<br> 2）用dd命令直接指定054efc14地址，第二个d表示用DWORD格式<br> dd 054efc14<br> 3）用ed命令把054efc14地址上的值修改成11112222<br> ed 054efc14  11112222<br> 4）再次用dd命令显示054efc14地址上的值，后面的L4参数表示长度为4个DWORD<br> dd 054efc14  L4<br> 5）在内存中搜索sina.com<br> s –u  0012ff40 L?8000000 “sina.com”<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">## 其他常用指令：</div></pre></td></tr></table></figure></p>
<p> lmf   列出当前进程中加载的所有DLL文件和对应的路径<br> ~    显示线程信息和不同线程之间切换的值<br> k    显示当前线程的callstack<br> ~*k   结合~和k命令，来显示所有线程的callstack<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> </div><div class="line"> </div><div class="line">## 生成DUMP包脚本</div><div class="line">``` </div><div class="line"></div><div class="line"> </div><div class="line">Set objShell =CreateObject(&quot;Wscript.Shell&quot;)</div><div class="line">Dim InputPid</div><div class="line">InputPid = InputBox(&quot;请输入Pid&quot;)</div><div class="line">objCommand1 = &quot;&quot;&quot;D:\ProgramFiles\Debugging Tools for Windows (x86)\adplus.vbs&quot;&quot;&quot; &amp;&quot; -hang -o d:\dump -quiet -p &quot; &amp; InputPid</div><div class="line">objShell.Run(objCommand1)</div><div class="line"> </div><div class="line">保存成.vbs的文件</div><div class="line">点开运行后，输入对应的进程PID，即可抓下当前进程的包。</div></pre></td></tr></table></figure></p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.loadby sos mscorwks	.Net 3.5版本及以下</div><div class="line">.loadby sos clr	.Net 4.0</div><div class="line">.load c:\windows\microsoft.net\framework\v2.0.50727\sos.dll	加载SOS文件</div><div class="line">.sympath=	如果服务器的.Net版本与本机不匹配需要服务器版本的mscordacwks.dll文件</div><div class="line">!help	sos指令帮助</div><div class="line">vertarget	查看系统运行时间</div><div class="line">!threads	显示所有线程</div><div class="line">!threadpool(!tp)	显示程序池信息</div><div class="line">~54s  	查看54号线程</div><div class="line">kb 	显示当前线程的callstack</div><div class="line">~*e !clrstack  	看所有线程的堆栈信息</div><div class="line">!syncblk	显示同步块</div><div class="line">!runaway	显示线程cpu时间</div><div class="line">!pe	打印异常</div><div class="line">!dumpheap	显示托管堆的信息</div><div class="line">!dumpheap –stat	检查当前所有托管类型的统计信息</div><div class="line">!dumpheap –mt 	查看函数表地址中的各个对象信息	!dumpheap –mt 79124418   79124418是指某个函数表的地址。</div><div class="line">!clrstack	显示调用栈</div><div class="line">!dumpstackobjects	打印当前thread的stack中保存的所有托管的object</div><div class="line">!dumpclass	打印出指定类型信息址上的类型定义</div><div class="line">!eeheap	列举出当前进程中managed heap的统计信息</div><div class="line">!dumpobj(!do)	显示一个对象的内容	!do 0aca1000 查看0aca1000地址中的对象</div><div class="line">!dumparray(!da)	显示数组</div><div class="line">!gcroot	跟踪对象内存引用	!gcroot 0aca1000   查看谁root 了0aca1000对象</div><div class="line">!gchandles	打印出当前所有的GC Handle统计信息</div><div class="line">!objsize	打印出指定object</div><div class="line">!ip2md	找到对应的module信息，后面参数为Callback中的EIP地址	!ip2md 0x09d30bao</div><div class="line">lmvm	查看DLL/EXE文件信息，参数为某个dll文件名称	lmvm commonobjects</div><div class="line">!savemodule	保存DLL到本场	!savemodule 081f0000 d:\xiongli\commandobject.dll</div><div class="line">S	可以搜索内存	在内存中搜索sina.com: s  –u  0012ff40 L?8000000 “sina.com”</div><div class="line">r	显示寄存器的信息</div><div class="line">d	显示内存地址上的值	使用d命令显示esp寄存器指向的内存，默认为byte: d  esp</div><div class="line">用dd命令直接指定054efc14地址，第二个d表示用DWORD格式: dd  054efc14</div><div class="line">e	命令修改内存地址上的值	用ed命令把054efc14地址上的值修改成11112222: ed  054efc14  11112222</div><div class="line">!address	命令显示某一地址上的页信息</div><div class="line">lmf	列出当前进程中加载的所有DLL文件和对应的路径</div><div class="line">~	显示线程信息和不同线程之间切换的值</div><div class="line">k	显示当前线程的call stack</div><div class="line">~*k	结合~和k命令，来显示所有线程的callstack</div></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Windbg</tag>
      </tags>
  </entry>
  <entry>
    <title>npm镜像</title>
    <url>/2017/02/07/index/</url>
    <content><![CDATA[<h1 id="国内优秀npm镜像推荐及使用"><a href="#国内优秀npm镜像推荐及使用" class="headerlink" title="国内优秀npm镜像推荐及使用"></a>国内优秀npm镜像推荐及使用</h1><p>  npm全称Node Package Manager，是node.js的模块依赖管理工具。由于npm的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用</p>
<h2 id="国内优秀npm镜像"><a href="#国内优秀npm镜像" class="headerlink" title="国内优秀npm镜像"></a>国内优秀npm镜像</h2><hr>
<h3 id="淘宝npm镜像"><a href="#淘宝npm镜像" class="headerlink" title="淘宝npm镜像"></a>淘宝npm镜像</h3><ul>
<li>搜索地址：<a href="http://npm.taobao.org/" target="_blank" rel="external">http://npm.taobao.org/</a></li>
<li>registry地址：<a href="http://registry.npm.taobao.org/" target="_blank" rel="external">http://registry.npm.taobao.org/</a><h3 id="cnpmjs镜像"><a href="#cnpmjs镜像" class="headerlink" title="cnpmjs镜像"></a>cnpmjs镜像</h3></li>
<li>搜索地址：<a href="http://cnpmjs.org/" target="_blank" rel="external">http://cnpmjs.org/</a></li>
<li>registry地址：<a href="http://r.cnpmjs.org/" target="_blank" rel="external">http://r.cnpmjs.org/</a><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2>有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：<h3 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm --registry https://registry.npm.taobao.org install express</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="持久使用"><a href="#持久使用" class="headerlink" title="持久使用"></a>持久使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm config set registry https://registry.npm.taobao.org</div><div class="line"></div><div class="line">// 配置后可通过下面方式来验证是否成功</div><div class="line">npm config get registry</div><div class="line">// 或</div><div class="line">npm info express</div></pre></td></tr></table></figure>
<h3 id="通过cnpm使用"><a href="#通过cnpm使用" class="headerlink" title="通过cnpm使用"></a>通过cnpm使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class="line"></div><div class="line">// 使用</div><div class="line">cnpm install express</div></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2017/01/10/redis/</url>
    <content><![CDATA[<h2 id="redis-启动与停止"><a href="#redis-启动与停止" class="headerlink" title="redis 启动与停止"></a>redis 启动与停止</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">redis-server redis.conf</div><div class="line">redis-cli shutdown</div></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc常用注解标签</title>
    <url>/2016/12/19/spring/</url>
    <content><![CDATA[<h1 id="springmvc常用注解标签详解"><a href="#springmvc常用注解标签详解" class="headerlink" title="springmvc常用注解标签详解"></a>springmvc常用注解标签详解</h1><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和@RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。<br>@Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。单单使用@Controller 标记在一个类上还不能真正意义上的说它就是SpringMVC 的一个控制器类，因为这个时候Spring 还不认识它。那么要如何做Spring 才能认识它呢？这个时候就需要我们把这个控制器类交给Spring 来管理。有两种方式：</p>
<ol>
<li>在SpringMVC 的配置文件中定义MyController 的bean 对象。</li>
<li>在SpringMVC 的配置文件中告诉Spring 该到哪里去找标记为@Controller 的Controller 控制器。<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--方式一--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.host.app.web.controller.MyController"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!--方式二--&gt;</span></div><div class="line"><span class="tag">&lt; <span class="attr">context:component-scan</span> <span class="attr">base-package</span> = <span class="string">"com.host.app.web"</span> /&gt;</span>//路径写到controller的上一层(扫描包详解见下面浅析)</div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p>RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。<br>RequestMapping注解有六个属性，下面我们把她分成三类进行说明（下面有相应示例）</p>
<h3 id="value，-method；"><a href="#value，-method；" class="headerlink" title="value， method；"></a>value， method；</h3><ol>
<li>value:指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）</li>
<li>method:指定请求的method类型， GET、POST、PUT、DELETE等；<h3 id="consumes，produces"><a href="#consumes，produces" class="headerlink" title="consumes，produces"></a>consumes，produces</h3>consumes:指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;<br>produces:指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；<h3 id="params，headers"><a href="#params，headers" class="headerlink" title="params，headers"></a>params，headers</h3></li>
<li>params： 指定request中必须包含某些参数值是，才让该方法处理。</li>
<li>headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。<h2 id="Resource和-Autowired"><a href="#Resource和-Autowired" class="headerlink" title="@Resource和@Autowired"></a>@Resource和@Autowired</h2>@Resource和@Autowired都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入<br>在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法</li>
</ol>
<h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><p>两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。</p>
<h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><p><strong>@Autowired</strong> </p>
<p>@Autowired为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> </span>&#123;</div><div class="line">    <span class="comment">// 下面两种@Autowired只要使用一种即可</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserDao userDao; <span class="comment">// 用于字段上</span></div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123; <span class="comment">// 用于属性的方法上</span></div><div class="line">        <span class="keyword">this</span>.userDao = userDao;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。如下：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)</div><div class="line">    <span class="keyword">private</span> UserDao userDao; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>@Resource</strong></p>
<p>@Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> </span>&#123;</div><div class="line">    <span class="comment">// 下面两种@Resource只要使用一种即可</span></div><div class="line">    <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)</div><div class="line">    <span class="keyword">private</span> UserDao userDao; <span class="comment">// 用于字段上</span></div><div class="line">    </div><div class="line">    <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123; <span class="comment">// 用于属性的setter方法上</span></div><div class="line">        <span class="keyword">this</span>.userDao = userDao;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注：最好是将@Resource放在setter方法上，因为这样更符合面向对象的思想，通过set、get去操作属性，而不是直接去操作属性。</p>
<p>@Resource装配顺序：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1.如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。</div><div class="line"></div><div class="line">2.如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。</div><div class="line"></div><div class="line">3.如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。</div><div class="line"></div><div class="line">4.如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。</div></pre></td></tr></table></figure></p>
<p>@Resource的作用相当于@Autowired，只不过@Autowired按照byType自动注入。</p>
<h2 id="ModelAttribute和-SessionAttributes"><a href="#ModelAttribute和-SessionAttributes" class="headerlink" title="@ModelAttribute和 @SessionAttributes"></a>@ModelAttribute和 @SessionAttributes</h2><p>代表的是：该Controller的所有方法在调用前，先执行此@ModelAttribute方法，可用于注解和方法参数中，可以把这个@ModelAttribute特性，应用在BaseController当中，所有的Controller继承BaseController，即可实现在调用Controller时，先执行@ModelAttribute方法。</p>
<p>@SessionAttributes即将值放到session作用域中，写在class上面。</p>
<p>具体示例参见下面：使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据</p>
<h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p>用于将请求URL中的模板变量映射到功能处理方法的参数上，即取出uri模板中的变量作为参数。如：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;  </div><div class="line">     <span class="meta">@RequestMapping</span>(value=<span class="string">"/user/&#123;userId&#125;/roles/&#123;roleId&#125;"</span>,method = RequestMethod.GET)  </div><div class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getLogin</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> String userId,  </span></div><div class="line">         @<span class="title">PathVariable</span><span class="params">(<span class="string">"roleId"</span>)</span> String roleId)&#123;  </div><div class="line">         System.out.println(<span class="string">"User Id : "</span> + userId);  </div><div class="line">         System.out.println(<span class="string">"Role Id : "</span> + roleId);  </div><div class="line">         <span class="keyword">return</span> <span class="string">"hello"</span>;  </div><div class="line">     &#125;  </div><div class="line">     <span class="meta">@RequestMapping</span>(value=<span class="string">"/product/&#123;productId&#125;"</span>,method = RequestMethod.GET)  </div><div class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getProduct</span><span class="params">(@PathVariable(<span class="string">"productId"</span>)</span> String productId)</span>&#123;  </div><div class="line">           System.out.println(<span class="string">"Product Id : "</span> + productId);  </div><div class="line">           <span class="keyword">return</span> <span class="string">"hello"</span>;  </div><div class="line">     &#125;  </div><div class="line">     <span class="meta">@RequestMapping</span>(value=<span class="string">"/javabeat/&#123;regexp1:[a-z-]+&#125;"</span>,  </div><div class="line">           method = RequestMethod.GET)  </div><div class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getRegExp</span><span class="params">(@PathVariable(<span class="string">"regexp1"</span>)</span> String regexp1)</span>&#123;  </div><div class="line">           System.out.println(<span class="string">"URI Part 1 : "</span> + regexp1);  </div><div class="line">           <span class="keyword">return</span> <span class="string">"hello"</span>;  </div><div class="line">     &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="requestParam"><a href="#requestParam" class="headerlink" title="@requestParam"></a>@requestParam</h2><p>@requestParam主要用于在SpringMVC后台控制层获取参数，类似一种是request.getParameter(“name”)，它有三个常用参数：defaultValue = “0”, required = false, value = “isApp”；defaultValue 表示设置默认值，required 铜过boolean设置是否是必须要传入的参数，value 值表示接受的传入的参数类型。</p>
<h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><p>作用： 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。</p>
<p>使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；</p>
<h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>相当于通用的注解，当不知道一些类归到哪个层时使用，但是不建议。</p>
<h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><p>用于注解dao层，在daoImpl类上面注解。</p>
<h1 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h1><h2 id="使用-RequestMapping-来映射-Request-请求与处理器"><a href="#使用-RequestMapping-来映射-Request-请求与处理器" class="headerlink" title="使用 @RequestMapping 来映射 Request 请求与处理器"></a>使用 @RequestMapping 来映射 Request 请求与处理器</h2><p>方式一、通过常见的类路径和方法路径结合访问controller方法</p>
<p>方式二、使用uri模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span> ( <span class="string">"/test/&#123;variable1&#125;"</span> )</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span> ( <span class="string">"/showView/&#123;variable2&#125;"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">showView</span><span class="params">( @PathVariable String variable1, @PathVariable ( <span class="string">"variable2"</span> )</span> <span class="keyword">int</span> variable2) </span>&#123;</div><div class="line">       ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</div><div class="line">       modelAndView.setViewName( <span class="string">"viewName"</span> );</div><div class="line">       modelAndView.addObject( <span class="string">" 需要放到 model 中的属性名称 "</span> , <span class="string">" 对应的属性值，它是一个对象 "</span> );</div><div class="line">       <span class="keyword">return</span> modelAndView;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>URI 模板就是在URI 中给定一个变量，然后在映射的时候动态的给该变量赋值</strong><br>如URI 模板<a href="http://localhost/app/{variable1}/index.html" target="_blank" rel="external">http://localhost/app/{variable1}/index.html</a> ，这个模板里面包含一个变量variable1 ，那么当我们请求<a href="http://localhost/app/hello/index.html" target="_blank" rel="external">http://localhost/app/hello/index.html</a> 的时候，该URL 就跟模板相匹配，只是把模板中的variable1 用hello 来取代。这个变量在SpringMVC 中是使用@PathVariable 来标记的。在SpringMVC 中，我们可以使用@PathVariable 来标记一个Controller 的处理方法参数，表示该参数的值将使用URI 模板中对应的变量的值来赋值。<br>代码中我们定义了两个URI 变量，一个是控制器类上的variable1 ，一个是showView 方法上的variable2 ，然后在showView 方法的参数里面使用@PathVariable 标记使用了这两个变量。所以当我们使用/test/hello/showView/2.do 来请求的时候就可以访问到MyController 的showView 方法，这个时候variable1 就被赋予值hello ，variable2 就被赋予值2 ，然后我们在showView 方法参数里面标注了参数variable1 和variable2 是来自访问路径的path 变量，这样方法参数variable1 和variable2 就被分别赋予hello 和2 。方法参数variable1 是定义为String 类型，variable2 是定义为int 类型，像这种简单类型在进行赋值的时候Spring 是会帮我们自动转换的。<br>在上面的代码中我们可以看到在标记variable1 为path 变量的时候我们使用的是@PathVariable ，而在标记variable2 的时候使用的是@PathVariable(“variable2”) 。这两者有什么区别呢？第一种情况就默认去URI 模板中找跟参数名相同的变量，但是这种情况只有在使用debug 模式进行编译的时候才可以，而第二种情况是明确规定使用的就是URI 模板中的variable2 变量。当不是使用debug 模式进行编译，或者是所需要使用的变量名跟参数名不相同的时候，就要使用第二种方式明确指出使用的是URI 模板中的哪个变量。<br>除了在请求路径中使用URI 模板，定义变量之外，@RequestMapping 中还支持通配符“* ”。如下面的代码我就可以使用/myTest/whatever/wildcard.do 访问到Controller 的testWildcard 方法。如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span> ( <span class="string">"/myTest"</span> )</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span> ( <span class="string">"*/wildcard"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testWildcard</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"wildcard------------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="string">"wildcard"</span> ;</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当@RequestParam中没有指定参数名称时，Spring 在代码是debug 编译的情况下会默认取更方法参数同名的参数，如果不是debug 编译的就会报错。</p>
<h2 id="使用-RequestMapping-的一些高级用法"><a href="#使用-RequestMapping-的一些高级用法" class="headerlink" title="使用 @RequestMapping 的一些高级用法"></a>使用 @RequestMapping 的一些高级用法</h2><h3 id="params属性"><a href="#params属性" class="headerlink" title="params属性"></a>params属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span> (value= <span class="string">"testParams"</span> , params=&#123; <span class="string">"param1=value1"</span> , <span class="string">"param2"</span> , <span class="string">"!param3"</span> &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testParams</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"test Params..........."</span> );</div><div class="line">       <span class="keyword">return</span> <span class="string">"testParams"</span> ;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>用@RequestMapping 的params 属性指定了三个参数，这些参数都是针对请求参数而言的，它们分别表示参数param1 的值必须等于value1 ，参数param2 必须存在，值无所谓，参数param3 必须不存在，只有当请求/testParams.do 并且满足指定的三个参数条件的时候才能访问到该方法。所以当请求/testParams.do?param1=value1&amp;param2=value2 的时候能够正确访问到该testParams 方法，当请求/testParams.do?param1=value1&amp;param2=value2&amp;param3=value3 的时候就不能够正常的访问到该方法，因为在@RequestMapping 的params 参数里面指定了参数param3 是不能存在的。</p>
<h3 id="method属性"><a href="#method属性" class="headerlink" title="method属性"></a>method属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span> (value= <span class="string">"testMethod"</span> , method=&#123;RequestMethod. GET , RequestMethod. DELETE &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="string">"method"</span> ;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在上面的代码中就使用method 参数限制了以GET 或DELETE 方法请求/testMethod 的时候才能访问到该Controller 的testMethod 方法。</p>
<h3 id="headers属性"><a href="#headers属性" class="headerlink" title="headers属性"></a>headers属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span> (value= <span class="string">"testHeaders"</span> , headers=&#123; <span class="string">"host=localhost"</span> , <span class="string">"Accept"</span> &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testHeaders</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="string">"headers"</span> ;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>headers 属性的用法和功能与params 属性相似。在上面的代码中当请求/testHeaders.do 的时候只有当请求头包含Accept 信息，且请求的host 为localhost 的时候才能正确的访问到testHeaders 方法。</p>
<h2 id="RequestMapping-标记的处理器方法支持的方法参数和返回类型"><a href="#RequestMapping-标记的处理器方法支持的方法参数和返回类型" class="headerlink" title="@RequestMapping 标记的处理器方法支持的方法参数和返回类型"></a>@RequestMapping 标记的处理器方法支持的方法参数和返回类型</h2><h3 id="支持的方法参数类型"><a href="#支持的方法参数类型" class="headerlink" title="支持的方法参数类型"></a>支持的方法参数类型</h3><ol>
<li>HttpServlet 对象，主要包括HttpServletRequest 、HttpServletResponse 和HttpSession 对象。 这些参数Spring 在调用处理器方法的时候会自动给它们赋值，所以当在处理器方法中需要使用到这些对象的时候，可以直接在方法上给定一个方法参数的申明，然后在方法体里面直接用就可以了。但是有一点需要注意的是在使用HttpSession 对象的时候，如果此时HttpSession 对象还没有建立起来的话就会有问题。</li>
<li>Spring 自己的WebRequest 对象。 使用该对象可以访问到存放在HttpServletRequest 和HttpSession 中的属性值。</li>
<li>InputStream 、OutputStream 、Reader 和Writer 。 InputStream 和Reader 是针对HttpServletRequest 而言的，可以从里面取数据；OutputStream 和Writer 是针对HttpServletResponse 而言的，可以往里面写数据。</li>
<li>使用@PathVariable 、@RequestParam 、@CookieValue 和@RequestHeader 标记的参数。</li>
<li>使用@ModelAttribute 标记的参数。</li>
<li>java.util.Map 、Spring 封装的Model 和ModelMap 。 这些都可以用来封装模型数据，用来给视图做展示。</li>
<li>实体类。 可以用来接收上传的参数。</li>
<li>Spring 封装的MultipartFile 。 用来接收上传文件的。</li>
<li>Spring 封装的Errors 和BindingResult 对象。 这两个对象参数必须紧接在需要验证的实体对象参数之后，它里面包含了实体对象的验证结果。</li>
</ol>
<h3 id="支持的返回类型"><a href="#支持的返回类型" class="headerlink" title="支持的返回类型"></a>支持的返回类型</h3><ol>
<li>一个包含模型和视图的ModelAndView 对象。</li>
<li>一个模型对象，这主要包括Spring 封装好的Model 和ModelMap ，以及java.util.Map ，当没有视图返回的时候视图名称将由RequestToViewNameTranslator 来决定。</li>
<li>一个View 对象。这个时候如果在渲染视图的过程中模型的话就可以给处理器方法定义一个模型参数，然后在方法体里面往模型中添加值。</li>
<li>一个String 字符串。这往往代表的是一个视图名称。这个时候如果需要在渲染视图的过程中需要模型的话就可以给处理器方法一个模型参数，然后在方法体里面往模型中添加值就可以了。</li>
<li>返回值是void 。这种情况一般是我们直接把返回结果写到HttpServletResponse 中了，如果没有写的话，那么Spring 将会利用RequestToViewNameTranslator 来返回一个对应的视图名称。如果视图中需要模型的话，处理方法与返回字符串的情况相同。</li>
<li>如果处理器方法被注解@ResponseBody 标记的话，那么处理器方法的任何返回类型都会通过HttpMessageConverters 转换之后写到HttpServletResponse 中，而不会像上面的那些情况一样当做视图或者模型来处理。</li>
<li>除以上几种情况之外的其他任何返回类型都会被当做模型中的一个属性来处理，而返回的视图还是由RequestToViewNameTranslator 来决定，添加到模型中的属性名称可以在该方法上用@ModelAttribute(“attributeName”) 来定义，否则将使用返回类型的类名称的首字母小写形式来表示。使用@ModelAttribute 标记的方法会在@RequestMapping 标记的方法执行之前执行。</li>
</ol>
<h2 id="使用-ModelAttribute-和-SessionAttributes-传递和保存数据"><a href="#使用-ModelAttribute-和-SessionAttributes-传递和保存数据" class="headerlink" title="使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据"></a>使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据</h2><p>SpringMVC 支持使用 @ModelAttribute 和 @SessionAttributes 在不同的模型（model）和控制器之间共享数据。 @ModelAttribute 主要有两种使用方式，一种是标注在方法上，一种是标注在 Controller 方法参数上。</p>
<p>当 @ModelAttribute 标记在方法上的时候，该方法将在处理器方法执行之前执行，然后把返回的对象存放在 session 或模型属性中，属性名称可以使用 @ModelAttribute(“attributeName”) 在标记方法的时候指定，若未指定，则使用返回类型的类名称（首字母小写）作为属性名称。关于 @ModelAttribute 标记在方法上时对应的属性是存放在 session 中还是存放在模型中，我们来做一个实验，看下面一段代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span> ( <span class="string">"/myTest"</span> )</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"hello"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"-------------Hello---------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="string">"world"</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"intValue"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInteger</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"-------------intValue---------------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span> ( <span class="string">"sayHello"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">( @ModelAttribute ( <span class="string">"hello"</span> )</span> String hello, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"intValue"</span> )</span> <span class="keyword">int</span> num, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"user2"</span> )</span> User user, Writer writer, HttpSession session) <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">       writer.write( <span class="string">"Hello "</span> + hello + <span class="string">" , Hello "</span> + user.getUsername() + num);</div><div class="line">       writer.write( <span class="string">"\r"</span> );</div><div class="line">       Enumeration enume = session.getAttributeNames();</div><div class="line">       <span class="keyword">while</span> (enume.hasMoreElements())</div><div class="line">           writer.write(enume.nextElement() + <span class="string">"\r"</span> );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"user2"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</div><div class="line">       System. out .println( <span class="string">"---------getUser-------------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"user2"</span> );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们请求 /myTest/sayHello.do 的时候使用 @ModelAttribute 标记的方法会先执行，然后把它们返回的对象存放到模型中。最终访问到 sayHello 方法的时候，使用 @ModelAttribute 标记的方法参数都能被正确的注入值。执行结果如下所示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hello world,Hello user210</div></pre></td></tr></table></figure></p>
<p>由执行结果我们可以看出来，此时 session 中没有包含任何属性，也就是说上面的那些对象都是存放在模型属性中，而不是存放在 session 属性中。那要如何才能存放在 session 属性中呢？这个时候我们先引入一个新的概念 @SessionAttributes ，它的用法会在讲完 @ModelAttribute 之后介绍，这里我们就先拿来用一下。我们在 MyController 类上加上 @SessionAttributes 属性标记哪些是需要存放到 session 中的。看下面的代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span> ( <span class="string">"/myTest"</span> )</div><div class="line"><span class="meta">@SessionAttributes</span> (value=&#123; <span class="string">"intValue"</span> , <span class="string">"stringValue"</span> &#125;, types=&#123;User. <span class="class"><span class="keyword">class</span> &#125;)</span></div><div class="line"><span class="title">public</span> <span class="title">class</span> <span class="title">MyController</span> &#123;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"hello"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"-------------Hello---------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="string">"world"</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"intValue"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInteger</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"-------------intValue---------------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="meta">@RequestMapping</span> ( <span class="string">"sayHello"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(Map&lt;String, Object&gt; map, @ModelAttribute ( <span class="string">"hello"</span> )</span> String hello, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"intValue"</span> )</span> <span class="keyword">int</span> num, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"user2"</span> )</span> User user, Writer writer, HttpServletRequest request) <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">       map.put( <span class="string">"stringValue"</span> , <span class="string">"String"</span> );</div><div class="line">       writer.write( <span class="string">"Hello "</span> + hello + <span class="string">" , Hello "</span> + user.getUsername() + num);</div><div class="line">       writer.write( <span class="string">"\r"</span> );</div><div class="line">       HttpSession session = request.getSession();</div><div class="line">       Enumeration enume = session.getAttributeNames();</div><div class="line">       <span class="keyword">while</span> (enume.hasMoreElements())</div><div class="line">           writer.write(enume.nextElement() + <span class="string">"\r"</span> );</div><div class="line">       System. out .println(session);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"user2"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"---------getUser-------------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"user2"</span> );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在上面代码中我们指定了属性为 intValue 或 stringValue 或者类型为 User 的都会放到 Session中，利用上面的代码当我们访问 /myTest/sayHello.do 的时候，结果如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hello world,Hello user210</div></pre></td></tr></table></figure></p>
<p>仍然没有打印出任何 session 属性，这是怎么回事呢？怎么定义了把模型中属性名为 intValue 的对象和类型为 User 的对象存到 session 中，而实际上没有加进去呢？难道我们错啦？我们当然没有错，只是在第一次访问 /myTest/sayHello.do 的时候 @SessionAttributes 定义了需要存放到 session 中的属性，而且这个模型中也有对应的属性，但是这个时候还没有加到 session 中，所以 session 中不会有任何属性，等处理器方法执行完成后 Spring 才会把模型中对应的属性添加到 session 中。所以当请求第二次的时候就会出现如下结果：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hello world,Hello user210</div><div class="line"></div><div class="line">user2</div><div class="line"></div><div class="line">intValue</div><div class="line"></div><div class="line">stringValue</div></pre></td></tr></table></figure></p>
<p>当 @ModelAttribute 标记在处理器方法参数上的时候，表示该参数的值将从模型或者 Session 中取对应名称的属性值，该名称可以通过 @ModelAttribute(“attributeName”) 来指定，若未指定，则使用参数类型的类名称（首字母小写）作为属性名称。</p>
<h2 id="PathVariable和-RequestParam的区别"><a href="#PathVariable和-RequestParam的区别" class="headerlink" title="@PathVariable和@RequestParam的区别"></a>@PathVariable和@RequestParam的区别</h2><p>请求路径上有个id的变量值，可以通过@PathVariable来获取  @RequestMapping(value = “/page/{id}”, method = RequestMethod.GET)<br>@RequestParam用来获得静态的URL请求入参     spring注解时action里用到。</p>
<p>简介：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">handler method 参数绑定常用的注解,我们根据他们处理的Request的不同内容部分分为四类：（主要讲解常用类型）</div><div class="line"></div><div class="line">A、处理requet uri 部分（这里指uri template中variable，不含queryString部分）的注解：   @PathVariable;</div><div class="line"></div><div class="line">B、处理request header部分的注解：   @RequestHeader, @CookieValue;</div><div class="line"></div><div class="line">C、处理request body部分的注解：@RequestParam,  @RequestBody;</div><div class="line"></div><div class="line">D、处理attribute类型是注解： @SessionAttributes, @ModelAttribute;</div></pre></td></tr></table></figure></p>
<h3 id="PathVariable-1"><a href="#PathVariable-1" class="headerlink" title="@PathVariable"></a>@PathVariable</h3><p>当使用@RequestMapping URI template 样式映射时， 即 someUrl/{paramId}, 这时的paramId可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。</p>
<p>示例代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;"</span>)  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RelativePathUriTemplateController</span> </span>&#123;  </div><div class="line">  </div><div class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/pets/&#123;petId&#125;"</span>)  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(@PathVariable String ownerId, @PathVariable String petId, Model model)</span> </span>&#123;      </div><div class="line">    <span class="comment">// implementation omitted   </span></div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码把URI template 中变量 ownerId的值和petId的值，绑定到方法的参数上。若方法参数名称和需要绑定的uri template中变量名称不一致，需要在@PathVariable(“name”)指定uri template中的名称。</p>
<h3 id="RequestHeader、-CookieValue"><a href="#RequestHeader、-CookieValue" class="headerlink" title="@RequestHeader、@CookieValue"></a>@RequestHeader、@CookieValue</h3><p>@RequestHeader 注解，可以把Request请求header部分的值绑定到方法的参数上。</p>
<p>示例代码：</p>
<p>这是一个Request 的header部分：</p>
<p>Host                    localhost:8080<br>Accept                  text/html,application/xhtml+xml,application/xml;q=0.9<br>Accept-Language         fr,en-gb;q=0.7,en;q=0.3<br>Accept-Encoding         gzip,deflate<br>Accept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7<br>Keep-Alive              300<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">@RequestMapping("/displayHeaderInfo.do")  </div><div class="line">public void displayHeaderInfo(@RequestHeader("Accept-Encoding") String encoding,  </div><div class="line">                              @RequestHeader("Keep-Alive") long keepAlive)  &#123;  </div><div class="line">&#125;</div><div class="line">```  </div><div class="line">上面的代码，把request header部分的 Accept-Encoding的值，绑定到参数encoding上了， Keep-Alive header的值绑定到参数keepAlive上。</div><div class="line"></div><div class="line">## @CookieValue 可以把Request header中关于cookie的值绑定到方法的参数上。</div><div class="line"></div><div class="line">例如有如下Cookie值：</div><div class="line">```java</div><div class="line">　　JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84</div><div class="line"></div><div class="line">@RequestMapping("/displayHeaderInfo.do")  </div><div class="line">public void displayHeaderInfo(@CookieValue("JSESSIONID") String cookie)  &#123;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>即把JSESSIONID的值绑定到参数cookie上。</p>
<h2 id="RequestParam-RequestBody"><a href="#RequestParam-RequestBody" class="headerlink" title="@RequestParam, @RequestBody"></a>@RequestParam, @RequestBody</h2><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="RequestParam"></a>RequestParam</h3><p>A） 常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String–&gt; 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；</p>
<p>B）用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容，提交方式GET、POST；</p>
<p>C) 该注解有两个属性： value、required； value用来指定要传入值的id名称，required用来指示参数是否必须绑定；</p>
<p>示例代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/pets"</span>)  </div><div class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"pet"</span>)  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;  </div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)  </div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">setupForm</span><span class="params">(@RequestParam(<span class="string">"petId"</span>)</span> <span class="keyword">int</span> petId, ModelMap model) </span>&#123;  </div><div class="line">       Pet pet = <span class="keyword">this</span>.clinic.loadPet(petId);  </div><div class="line">   model.addAttribute(<span class="string">"pet"</span>, pet);  </div><div class="line">   <span class="keyword">return</span> <span class="string">"petForm"</span>;  </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="RequestBody"></a>RequestBody</h3><p>该注解常用来处理Content-Type: 不是application/x-www-form-urlencoded编码的内容，例如application/json, application/xml等；</p>
<p>它是通过使用HandlerAdapter 配置的HttpMessageConverters来解析post data body，然后绑定到相应的bean上的。</p>
<p>因为配置有FormHttpMessageConverter，所以也可以用来处理 application/x-www-form-urlencoded的内容，处理完的结果放在一个MultiValueMap<string, string="">里，这种情况在某些特殊需求下使用，详情查看FormHttpMessageConverter api;</string,></p>
<p>示例代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/something"</span>, method = RequestMethod.PUT)  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@RequestBody String body, Writer writer)</span> <span class="keyword">throws</span> IOException </span>&#123;  </div><div class="line">  writer.write(body);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="SessionAttributes-ModelAttribute"><a href="#SessionAttributes-ModelAttribute" class="headerlink" title="@SessionAttributes, @ModelAttribute"></a>@SessionAttributes, @ModelAttribute</h2><h3 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes:"></a>@SessionAttributes:</h3><p>该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。</p>
<p>该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象；</p>
<p>示例代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editPet.do"</span>)  </div><div class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"pet"</span>)  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;  </div><div class="line">    <span class="comment">// ...   </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h3><p>该注解有两个用法，一个是用于方法上，一个是用于参数上；</p>
<p>用于方法上时：  通常用来在处理@RequestMapping之前，为请求绑定需要从后台查询的model；</p>
<p>用于参数上时： 用来通过名称对应，把相应名称的值绑定到注解的参数bean上；要绑定的值来源于：</p>
<p>A） @SessionAttributes 启用的attribute 对象上；</p>
<p>B） @ModelAttribute 用于方法上时指定的model对象；</p>
<p>C） 上述两种情况都没有时，new一个需要绑定的bean对象，然后把request中按名称对应的方式把值绑定到bean中。<br>用到方法上@ModelAttribute的示例代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@ModelAttribute</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">addAccount</span><span class="params">(@RequestParam String number)</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> accountManager.findAccount(number);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种方式实际的效果就是在调用@RequestMapping的方法之前，为request对象的model里put（“account”， Account）。</p>
<p>用在参数上的@ModelAttribute示例代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit"</span>, method = RequestMethod.POST)  </div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processSubmit</span><span class="params">(@ModelAttribute Pet pet)</span> </span>&#123;  </div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先查询 @SessionAttributes有无绑定的Pet对象，若没有则查询@ModelAttribute方法层面上是否绑定了Pet对象，若没有则将URI template中的值按对应的名称绑定到Pet对象的各属性上。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><context:component-scan base-package=""></context:component-scan></h2><p>component-scan 默认扫描的注解类型是 @Component，不过，在 @Component 语义基础上细化后的 @Repository, @Service 和 @Controller 也同样可以获得 component-scan 的青睐<br>有了<context:component-scan>，另一个<context:annotation-config>标签根本可以移除掉，因为已经被包含进去了<br>另外<context:annotation-config>还提供了两个子标签<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1. &lt;context:include-filter&gt; //指定扫描的路径</div><div class="line">2. &lt;context:exclude-filter&gt; //排除扫描的路径</div></pre></td></tr></table></figure></context:annotation-config></context:annotation-config></context:component-scan></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span>&gt;</span>有一个use-default-filters属性，属性默认为true,表示会扫描指定包下的全部的标有@Component的类，并注册成bean.也就是@Component的子注解@Service,@Reposity等。</div></pre></td></tr></table></figure>
<p>这种扫描的粒度有点太大，如果你只想扫描指定包下面的Controller或其他内容则设置use-default-filters属性为false，表示不再按照scan指定的包扫描，而是按照<context:include-filter>指定的包扫描，示例：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tan"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">"com.tan.*"</span>/&gt;</span>//注意后面要写.*</div><div class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure></context:include-filter></p>
<p>当没有设置use-default-filters属性或者属性为true时，表示基于base-packge包下指定扫描的具体路径<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tan"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">".controller.*"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">".service.*"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">".dao.*"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果相当于：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tan"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">".model.*"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>注意：本人尝试时无论哪种情况<context:include-filter>和<context:exclude-filter>都不能同时存在</context:exclude-filter></context:include-filter></p>
]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_tomcat(转)</title>
    <url>/2016/12/15/nginx-tomcat/</url>
    <content><![CDATA[<h1 id="搭建Nginx-Java环境"><a href="#搭建Nginx-Java环境" class="headerlink" title="搭建Nginx+Java环境"></a>搭建Nginx+Java环境</h1><p>Apache对Java的支持很灵活，它们的结合度也很高，例如Apache+Tomcat和Apache+resin等都可以实现对Java应用的支持。Apache一般采用一个内置模块来和Java应用服务器打交道。与Apache相比，Nginx在配合Java应用服务器方面，耦合度很低，它只能通过自身的反向代理功能来实现与Java应用服务器的支持。但这恰恰是Nginx的一个优点，耦合度的降低，可以使Nginx与Java服务器的相互影响降到最低。</p>
<p>接下来通过Nginx+Tomcat的实例来讲解Nginx对Java的支持。Tomcat在高并发环境下处理动态请求时性能很低，而在处理静态页面更加脆弱。虽然Tomcat的最新版本支持epoll，但是通过Nginx来处理静态页面要比通过Tomcat处理在性能方面好很多。</p>
<p>Nginx可以通过以下两种方式来实现与Tomcat的耦合：</p>
<p>将静态页面请求交给Nginx，动态请求交给后端Tomcat处理。</p>
<p>将所有请求都交给后端的Tomcat服务器处理，同时利用Nginx自身的负载均衡功能进行多台Tomcat服务器的负载均衡。</p>
<p>下面通过两个配置实例分别讲述这两种实现Nginx与Tomcat耦合的方式</p>
<h2 id="动态页面与静态页面分离的实例"><a href="#动态页面与静态页面分离的实例" class="headerlink" title="动态页面与静态页面分离的实例"></a>动态页面与静态页面分离的实例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">server &#123;  </div><div class="line">      listen 80;  </div><div class="line">      server_name www.ixdba.net;  </div><div class="line">      root /web/www/html;  </div><div class="line"> </div><div class="line">location /img/ &#123;  </div><div class="line">      alias /web/www/html/img/;  </div><div class="line">&#125;  </div><div class="line"> </div><div class="line">location ~ (\.jsp)|(\.do)$ &#123;  </div><div class="line">     proxy_pass http://192.168.12.130:8080;  </div><div class="line">     proxy_redirect off;  </div><div class="line">     proxy_set_header Host $host;  </div><div class="line">     proxy_set_header X-Real-IP $remote_addr;  </div><div class="line">     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  </div><div class="line">     client_max_body_size 10m;  </div><div class="line">     client_body_buffer_size 128k;  </div><div class="line">     proxy_connect_timeout 90;  </div><div class="line">     proxy_send_timeout 90;  </div><div class="line">     proxy_read_timeout 90;  </div><div class="line">     proxy_buffer_size 4k;  </div><div class="line">     proxy_buffers 4 32k;  </div><div class="line">     proxy_busy_buffers_size 64k;  </div><div class="line">     proxy_temp_file_write_size 64k;  </div><div class="line"> &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个实例中，首先定义了一个虚拟主机www.ixdba.net，然后通过location指令将/web/www/html/img/目录下的静态文件交给Nginx来完成。最后一个location指令将所有以.jsp、.do结尾的文件都交给Tomcat服务器的8080端口来处理，即<a href="http://192.168.12.130:8080。" target="_blank" rel="external">http://192.168.12.130:8080。</a></p>
<p>需要特别注意的是，在location指令中使用正则表达式后，proxy_pass后面的代理路径不能含有地址链接，也就是不能写成<a href="http://192.168.12.130:8080/，或者类似http://192.168.12.130:8080/jsp的形式。在location指令不使用正则表达式时，没有此限制。" target="_blank" rel="external">http://192.168.12.130:8080/，或者类似http://192.168.12.130:8080/jsp的形式。在location指令不使用正则表达式时，没有此限制。</a></p>
<h2 id="多个Tomcat负载均衡的实例"><a href="#多个Tomcat负载均衡的实例" class="headerlink" title="多个Tomcat负载均衡的实例"></a>多个Tomcat负载均衡的实例</h2><p>这里假定有3台Tomcat服务器，分别开放不同的端口，地址如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">192.168.12.131:8000  </div><div class="line">192.168.12.132:8080  </div><div class="line">192.168.12.133:8090</div></pre></td></tr></table></figure></p>
<p>Nginx的相关配置代码如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">upstream mytomcats &#123;  </div><div class="line">      server 192.168.12.131:8000;  </div><div class="line">      server 192.168.12.132:8080;  </div><div class="line">      server 192.168.12.133:8090;  </div><div class="line">&#125;  </div><div class="line"> </div><div class="line">server &#123;  </div><div class="line">      listen 80;  </div><div class="line">      server_name www.ixdba.net;  </div><div class="line"> </div><div class="line">location ~* \.(jpg|gif|png|swf|flv|wma|wmv|asf|mp3|mmf|zip|rar)$ &#123;  </div><div class="line">       root /web/www/html/;  </div><div class="line">&#125;  </div><div class="line"> </div><div class="line">location / &#123;  </div><div class="line">          proxy_pass http://mytomcats;  </div><div class="line">          proxy_redirect off;  </div><div class="line">          proxy_set_header Host $host;  </div><div class="line">          proxy_set_header X-Real-IP $remote_addr;  </div><div class="line">          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  </div><div class="line">          client_max_body_size 10m;  </div><div class="line">          client_body_buffer_size 128k;  </div><div class="line">          proxy_connect_timeout 90;  </div><div class="line">          proxy_send_timeout 90;  </div><div class="line">          proxy_read_timeout 90;  </div><div class="line">          proxy_buffer_size 4k;  </div><div class="line">          proxy_buffers 4 32k;  </div><div class="line">          proxy_busy_buffers_size 64k;  </div><div class="line">          proxy_temp_file_write_size 64k;  </div><div class="line">&#125;  </div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这个实例中，先通过upstream定义一个负载均衡组，组名为mytomcats，组的成员就是上面指定的3台Tomcat服务器；接着通过server指令定义一个www.ixdba.net的虚拟主机；然后通过location指令以正则表达式的方式将指定类型的文件全部交给Nginx去处理；最后将其他所有请求全部交给负载均衡组来处理。</p>
<p>这里还有一点需要注意，如果在location指令使用正则表达式后再用alias指令，Nginx是不支持的。</p>
]]></content>
      <tags>
        <tag>tomact</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql SHOW PROCESSLIST</title>
    <url>/2016/12/11/sql/</url>
    <content><![CDATA[<h1 id="SHOW-PROCESSLIST"><a href="#SHOW-PROCESSLIST" class="headerlink" title="SHOW PROCESSLIST"></a>SHOW PROCESSLIST</h1><p><strong>各列的含义和用途：</strong></p>
<ul>
<li>ID列</li>
</ul>
<blockquote>
<p>一个标识，你要kill一个语句的时候很有用，用命令杀掉此查询 /*/mysqladmin kill 进程号。</p>
</blockquote>
<ul>
<li>user列</li>
</ul>
<blockquote>
<p>显示单前用户，如果不是root，这个命令就只显示你权限范围内的sql语句。</p>
</blockquote>
<ul>
<li>host列</li>
</ul>
<blockquote>
<p>显示这个语句是从哪个ip的哪个端口上发出的。用于追踪出问题语句的用户。</p>
</blockquote>
<ul>
<li>db列</li>
</ul>
<blockquote>
<p>显示这个进程目前连接的是哪个数据库。</p>
</blockquote>
<ul>
<li>command列</li>
</ul>
<blockquote>
<p>显示当前连接的执行的命令，一般就是休眠（sleep），查询（query），连接（connect）。</p>
</blockquote>
<ul>
<li>time列</li>
</ul>
<blockquote>
<p>此这个状态持续的时间，单位是秒。</p>
</blockquote>
<ul>
<li>state列</li>
</ul>
<blockquote>
<p>显示使用当前连接的sql语句的状态，很重要的列，后续会有所有的状态的描述，请注意，state只是语句执行中的某一个状态，一个 sql语句，以查询为例，可能需要经过copying to tmp table，Sorting result，Sending data等状态才可以完成</p>
</blockquote>
<ul>
<li>info列</li>
</ul>
<blockquote>
<p>显示这个sql语句，因为长度有限，所以长的sql语句就显示不全，但是一个判断问题语句的重要依据。<br><a id="more"></a></p>
<h2 id="QUERY"><a href="#QUERY" class="headerlink" title="QUERY"></a>QUERY</h2><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host,info <span class="keyword">from</span> information_schema.processlist <span class="keyword">WHERE</span> ....</div></pre></td></tr></table></figure>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>MVVM</title>
    <url>/2016/12/09/MVVM/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><img src="http://ohugkp1mj.bkt.clouddn.com/mvvm.jpg" alt=""></p>
<ul>
<li>MVVM 框架 有几大优点</li>
</ul>
<ol>
<li>低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</li>
<li>可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。</li>
<li>独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xml代码。</li>
<li>可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写<a id="more"></a>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2></li>
<li>Vue</li>
<li>WPF MvvmLight</li>
</ol>
]]></content>
      <tags>
        <tag>MVVM</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 命令备忘</title>
    <url>/2016/12/09/hexo/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li>nodejs<a href="https://nodejs.org/en/" target="_blank" rel="external">下载</a> </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div><div class="line">$ hexo init blog</div><div class="line">$ cd blog</div><div class="line">$ npm install</div><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</div><div class="line">hexo p == hexo publish</div><div class="line">hexo g == hexo generate#生成</div><div class="line">hexo s == hexo server #启动服务预览</div><div class="line">hexo d == hexo deploy#部署</div></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN 没有填写备注不允许提交</title>
    <url>/2016/12/08/SVNhook/</url>
    <content><![CDATA[<figure class="highlight bat"><table><tr><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">SET</span> SVN_LOOK="C:\Program Files (x86)\VisualSVN Server\bin\svnlook.exe"</div><div class="line"><span class="built_in">SET</span> SVN_STYLECOP=C:\SVNStyleCop\SVNStyleCop.exe</div><div class="line"></div><div class="line"><span class="built_in">SET</span> REV_OR_TRAN=transaction</div><div class="line"></div><div class="line"><span class="keyword">IF</span> "%<span class="number">3</span>" == "test" <span class="built_in">SET</span> REV_OR_TRAN=revision</div><div class="line"></div><div class="line"><span class="variable">%SVN_STYLECOP%</span> -repository:%<span class="number">1</span> -<span class="variable">%REV_OR_TRAN%</span>:%<span class="number">2</span></div><div class="line"><span class="keyword">IF</span> <span class="variable">%ERRORLEVEL%</span> <span class="keyword">EQU</span> <span class="number">0</span> <span class="keyword">GOTO</span> STYLECOP_OK</div><div class="line"><span class="keyword">EXIT</span> <span class="variable">%ERRORLEVEL%</span></div><div class="line"></div><div class="line">:STYLECOP_OK</div><div class="line"><span class="variable">%SVN_LOOK%</span> log --<span class="variable">%REV_OR_TRAN%</span> %<span class="number">2</span> %<span class="number">1</span> | <span class="built_in">FindStr</span> .</div><div class="line"><span class="keyword">IF</span> <span class="variable">%ERRORLEVEL%</span> <span class="keyword">EQU</span> <span class="number">0</span> <span class="keyword">GOTO</span> FINAL_OK</div><div class="line"><span class="built_in">ECHO</span> "提交必须填写描述" &gt;&amp;<span class="number">2</span></div><div class="line"><span class="keyword">EXIT</span> -<span class="number">1</span></div><div class="line"></div><div class="line">:FINAL_OK</div><div class="line"><span class="keyword">EXIT</span> <span class="number">0</span></div><div class="line"></div><div class="line">:FINAL_OK</div><div class="line"><span class="keyword">EXIT</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
      <tags>
        <tag>SVN</tag>
      </tags>
  </entry>
</search>
